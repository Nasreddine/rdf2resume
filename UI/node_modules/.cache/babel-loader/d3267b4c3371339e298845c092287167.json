{"ast":null,"code":"import _objectSpread from \"/home/eelezi/thesis/rdf2resume/UI/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/eelezi/thesis/rdf2resume/UI/src/components/Dashboard/Forms/Modals/FormOtherInfo/OtherInfoModal.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { Modal, Row, Col, Button } from \"react-bootstrap\";\nimport { Combobox } from \"react-widgets\";\nimport CustomTextarea from \"../../../../core/CustomTextarea\";\nimport { createOtherInfo, updateOtherInfo, updateCVLastUpdate } from \"../../../../../actions\";\nimport { fetchOtherCVInfoTypes, fetchMainPropertiess, updateLanguage } from \"../../../../../actions/utilityActions\";\nimport { retrieveMainProperties, retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\nimport { cancelLabel, resetLabel, saveLabel, updateLabel, otherInfoAddTitle, otherInfoUpdateTitle, successTitle } from \"../../../../../translations/translations\";\nimport { ListItem, languages } from \"../../../../core/LanguageToggle\";\n\nclass OtherInfoModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      otherInfo: {\n        \"@type\": \"my0:OtherInfo\",\n        \"my0:otherInfoType\": \"\",\n        \"my0:otherInfoDescription\": [{\n          \"@value\": \"\",\n          \"@language\": \"en\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"it\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"fr\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"de\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"sq\"\n        }]\n      }\n    };\n\n    this.setInitialValues = () => {\n      if (this.props.id !== null && this.props.isUpdate === true) {\n        let inputRef = this.props.otherInfoObject;\n\n        let otherInfo = _objectSpread({}, this.state.otherInfo);\n\n        otherInfo[\"my0:otherInfoType\"] = inputRef[\"my0:otherInfoType\"];\n        otherInfo[\"my0:otherInfoDescription\"] = inputRef[\"my0:otherInfoDescription\"];\n        this.setState({\n          otherInfo\n        });\n      }\n    };\n\n    this.clearForm = () => {\n      const hist = {\n        \"@type\": \"my0:OtherInfo\",\n        \"my0:otherInfoType\": \"\",\n        \"my0:otherInfoDescription\": [{\n          \"@value\": \"\",\n          \"@language\": \"en\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"it\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"fr\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"de\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"sq\"\n        }]\n      };\n\n      if (!this.props.isUpdate) {\n        this.setState({\n          otherInfo: hist\n        });\n      } else {\n        this.setInitialValues();\n      }\n    };\n\n    this.handleSelectChange = (value, id) => {\n      let otherInfo = _objectSpread({}, this.state.otherInfo);\n\n      otherInfo[id] = value[\"@type\"];\n      this.setState({\n        otherInfo\n      });\n    };\n\n    this.handleInputChange = (e, lang) => {\n      let label = e.target.id;\n\n      let otherInfo = _objectSpread({}, this.state.otherInfo);\n\n      otherInfo[label] = this.replaceLanguageValue(otherInfo[label], lang, e.target.value);\n      this.setState({\n        otherInfo\n      });\n    };\n\n    this.handleSave = e => {\n      e.preventDefault();\n      this.props.createOtherInfo(this.state.otherInfo);\n      this.props.updateCVLastUpdate();\n      Swal.fire({\n        title: successTitle[this.props.language],\n        type: \"success\",\n        confirmButtonColor: \"#4bb3cc\",\n        heightAuto: false,\n        confirmButtonText: \"Okay\"\n      });\n    };\n\n    this.handleUpdate = e => {\n      this.props.updateOtherInfo({\n        object: this.state.otherInfo,\n        index: this.props.id\n      });\n      this.props.updateCVLastUpdate();\n      Swal.fire({\n        title: successTitle[this.props.language],\n        type: \"success\",\n        confirmButtonColor: \"#4bb3cc\",\n        heightAuto: false,\n        confirmButtonText: \"Okay\"\n      });\n    };\n\n    this.handleRenderingSubmitButton = lang => {\n      let isDisabled = this.state.otherInfo[\"my0:otherInfoDescription\"] === \"\";\n\n      if (!this.props.isUpdate) {\n        return React.createElement(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          disabled: isDisabled,\n          onClick: this.handleSave,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, saveLabel[lang]);\n      } else {\n        return React.createElement(Button, {\n          disabled: isDisabled,\n          type: \"submit\",\n          variant: \"primary\",\n          onClick: this.handleUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, updateLabel[lang]);\n      }\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchOtherCVInfoTypes();\n    this.props.fetchMainPropertiess(\"my0:OtherInfo\");\n    this.setInitialValues();\n  }\n\n  replaceLanguageValue(data, language, value) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === language) {\n        data[i][\"@value\"] = value;\n        break;\n      }\n    }\n\n    return data;\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let _this$state$otherInfo = this.state.otherInfo,\n        otherInfoDescription = _this$state$otherInfo[\"my0:otherInfoDescription\"],\n        otherInfoType = _this$state$otherInfo[\"my0:otherInfoType\"];\n    let onHide = this.props.onHide;\n    let lang = this.props.language;\n    let translatedProps = this.props.translatedProps;\n\n    let changeLanguage = value => this.props.updateLanguage(value);\n\n    return React.createElement(Modal, {\n      show: this.props.show,\n      onHide: this.props.onHide,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      className: \"reference-modal\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, this.props.isUpdate ? otherInfoUpdateTitle[lang] : otherInfoAddTitle[lang]), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })))), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        width: \"100%\",\n        justifyContent: \"left\",\n        marginLeft: \"0px\",\n        marginBottom: \"8px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"otherInfoType\", lang) + \" *\"), React.createElement(Combobox, {\n      name: \"otherInfoType\",\n      placeholder: this.renderLabel(translatedProps, \"otherInfoType\", lang),\n      data: this.props.others,\n      textField: lang,\n      valueField: \"@type\",\n      value: otherInfoType,\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleSelectChange(value, \"my0:otherInfoType\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        marginTop: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(CustomTextarea, {\n      id: \"my0:otherInfoDescription\",\n      label: this.renderLabel(translatedProps, \"otherInfoDescription\", lang),\n      value: this.findTranslatedValue(otherInfoDescription, lang),\n      handleChange: e => this.handleInputChange(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }))), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, React.createElement(Combobox, {\n      onChange: changeLanguage,\n      value: lang,\n      defaultValue: \"en\",\n      containerClassName: \"languagebox\",\n      data: languages,\n      itemComponent: ListItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }), this.handleRenderingSubmitButton(lang), React.createElement(Button, {\n      className: \"btn-reset\",\n      onClick: this.clearForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, resetLabel[lang]), React.createElement(Button, {\n      variant: \"danger\",\n      onClick: onHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, cancelLabel[lang])));\n  }\n\n}\n\nconst mapstateToProps = (state, ownProps) => {\n  return {\n    initialValues: state.cv[\"my0:hasOtherInfo\"][ownProps.id],\n    others: retrieveBaseProperties(state.utility.otherCVInfoValues),\n    language: state.utility.language,\n    translatedProps: retrieveMainProperties(state.utility[\"my0:OtherInfo\"])\n  };\n};\n\nexport default connect(mapstateToProps, {\n  createOtherInfo,\n  fetchOtherCVInfoTypes,\n  updateOtherInfo,\n  fetchMainPropertiess,\n  updateCVLastUpdate,\n  updateLanguage\n})(OtherInfoModal);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/UI/src/components/Dashboard/Forms/Modals/FormOtherInfo/OtherInfoModal.jsx"],"names":["React","Component","connect","Swal","Modal","Row","Col","Button","Combobox","CustomTextarea","createOtherInfo","updateOtherInfo","updateCVLastUpdate","fetchOtherCVInfoTypes","fetchMainPropertiess","updateLanguage","retrieveMainProperties","retrieveBaseProperties","cancelLabel","resetLabel","saveLabel","updateLabel","otherInfoAddTitle","otherInfoUpdateTitle","successTitle","ListItem","languages","OtherInfoModal","state","otherInfo","setInitialValues","props","id","isUpdate","inputRef","otherInfoObject","setState","clearForm","hist","handleSelectChange","value","handleInputChange","e","lang","label","target","replaceLanguageValue","handleSave","preventDefault","fire","title","language","type","confirmButtonColor","heightAuto","confirmButtonText","handleUpdate","object","index","handleRenderingSubmitButton","isDisabled","componentWillMount","data","length","i","findInArray","name","indexOf","newlength","renderLabel","translated","undefined","findTranslatedValue","render","otherInfoDescription","otherInfoType","onHide","translatedProps","changeLanguage","show","width","justifyContent","marginLeft","marginBottom","others","marginTop","mapstateToProps","ownProps","initialValues","cv","utility","otherCVInfoValues"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { Modal, Row, Col, Button } from \"react-bootstrap\";\nimport { Combobox } from \"react-widgets\";\nimport CustomTextarea from \"../../../../core/CustomTextarea\";\nimport { createOtherInfo, updateOtherInfo, updateCVLastUpdate } from \"../../../../../actions\";\nimport {\n  fetchOtherCVInfoTypes,\n  fetchMainPropertiess,\n  updateLanguage\n} from \"../../../../../actions/utilityActions\";\nimport {\n  retrieveMainProperties,\n  retrieveBaseProperties\n} from \"../../../../../utilities/utilityQueries\";\nimport {\n  cancelLabel,\n  resetLabel,\n  saveLabel,\n  updateLabel,\n  otherInfoAddTitle,\n  otherInfoUpdateTitle,\n  successTitle\n} from \"../../../../../translations/translations\";\nimport { ListItem, languages } from \"../../../../core/LanguageToggle\";\n\nclass OtherInfoModal extends Component {\n  state = {\n    otherInfo: {\n      \"@type\": \"my0:OtherInfo\",\n      \"my0:otherInfoType\": \"\",\n      \"my0:otherInfoDescription\": [{\n        \"@value\": \"\",\n        \"@language\": \"en\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"it\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"fr\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"de\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"sq\"\n      },\n      ]\n    }\n  };\n\n  componentWillMount() {\n    this.props.fetchOtherCVInfoTypes();\n    this.props.fetchMainPropertiess(\"my0:OtherInfo\");\n    this.setInitialValues();\n  }\n\n  setInitialValues = () => {\n    if (this.props.id !== null && this.props.isUpdate === true) {\n      let inputRef = this.props.otherInfoObject;\n      let otherInfo = { ...this.state.otherInfo };\n      otherInfo[\"my0:otherInfoType\"] = inputRef[\"my0:otherInfoType\"];\n      otherInfo[\"my0:otherInfoDescription\"] =\n        inputRef[\"my0:otherInfoDescription\"];\n      this.setState({\n        otherInfo\n      });\n    }\n  };\n\n  clearForm = () => {\n    const hist = {\n      \"@type\": \"my0:OtherInfo\",\n      \"my0:otherInfoType\": \"\",\n      \"my0:otherInfoDescription\": [{\n        \"@value\": \"\",\n        \"@language\": \"en\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"it\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"fr\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"de\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"sq\"\n      },\n      ]\n    };\n    if (!this.props.isUpdate) {\n      this.setState({\n        otherInfo: hist\n      });\n    } else {\n      this.setInitialValues();\n    }\n  };\n\n  handleSelectChange = (value, id) => {\n    let otherInfo = { ...this.state.otherInfo };\n    otherInfo[id] = value[\"@type\"];\n    this.setState({ otherInfo });\n  };\n\n  replaceLanguageValue(data, language, value) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === language) {\n        data[i][\"@value\"] = value;\n        break;\n      }\n    }\n    return data;\n  }\n\n  handleInputChange = (e, lang) => {\n    let label = e.target.id;\n    let otherInfo = { ...this.state.otherInfo };\n    otherInfo[label] = this.replaceLanguageValue(otherInfo[label], lang, e.target.value);\n    this.setState({\n      otherInfo\n    });\n  };\n\n  handleSave = e => {\n    e.preventDefault();\n    this.props.createOtherInfo(this.state.otherInfo);\n    this.props.updateCVLastUpdate();\n    Swal.fire({\n      title: successTitle[this.props.language],\n      type: \"success\",\n      confirmButtonColor: \"#4bb3cc\",\n      heightAuto: false,\n      confirmButtonText: \"Okay\"\n    });\n  };\n\n  handleUpdate = e => {\n    this.props.updateOtherInfo({\n      object: this.state.otherInfo,\n      index: this.props.id\n    });\n    this.props.updateCVLastUpdate();\n    Swal.fire({\n      title: successTitle[this.props.language],\n      type: \"success\",\n      confirmButtonColor: \"#4bb3cc\",\n      heightAuto: false,\n      confirmButtonText: \"Okay\"\n    });\n  };\n\n  handleRenderingSubmitButton = lang => {\n    let isDisabled =\n      this.state.otherInfo[\"my0:otherInfoDescription\"] === \"\";\n    if (!this.props.isUpdate) {\n      return (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={isDisabled}\n          onClick={this.handleSave}\n        >\n          {saveLabel[lang]}\n        </Button>\n      );\n    } else {\n      return (\n        <Button\n          disabled={isDisabled}\n          type=\"submit\"\n          variant=\"primary\"\n          onClick={this.handleUpdate}\n        >\n          {updateLabel[lang]}\n        </Button>\n      );\n    }\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let {\n      \"my0:otherInfoDescription\": otherInfoDescription,\n      \"my0:otherInfoType\": otherInfoType\n    } = this.state.otherInfo;\n\n    let { onHide } = this.props;\n\n    let lang = this.props.language;\n\n    let translatedProps = this.props.translatedProps;\n\n    let changeLanguage = (value) => this.props.updateLanguage(value);\n\n    return (\n      <Modal\n        show={this.props.show}\n        onHide={this.props.onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        className=\"reference-modal\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <Row>\n              <Col md={4}>\n                {this.props.isUpdate\n                  ? otherInfoUpdateTitle[lang]\n                  : otherInfoAddTitle[lang]}\n              </Col>\n              <Col md={8} />\n            </Row>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Row\n            style={{\n              width: \"100%\",\n              justifyContent: \"left\",\n              marginLeft: \"0px\",\n              marginBottom: \"8px\"\n            }}\n          >\n            <label className=\"label-rw\">\n              {this.renderLabel(translatedProps, \"otherInfoType\", lang) + \" *\"}\n            </label>\n            <Combobox\n              name=\"otherInfoType\"\n              placeholder={this.renderLabel(\n                translatedProps,\n                \"otherInfoType\",\n                lang\n              )}\n              data={this.props.others}\n              textField={lang}\n              valueField=\"@type\"\n              value={otherInfoType}\n              caseSensitive={false}\n              minLength={3}\n              filter=\"contains\"\n              onChange={value =>\n                this.handleSelectChange(value, \"my0:otherInfoType\")\n              }\n            />\n          </Row>\n          <div style={{ marginTop: \"10px\" }}>\n            <CustomTextarea\n              id=\"my0:otherInfoDescription\"\n              label={\n                this.renderLabel(\n                  translatedProps,\n                  \"otherInfoDescription\",\n                  lang\n                )\n              }\n              value={this.findTranslatedValue(otherInfoDescription, lang)}\n              handleChange={(e) => this.handleInputChange(e, lang)}\n            />\n          </div>\n        </Modal.Body>\n        <Modal.Footer>\n          <Combobox onChange={changeLanguage} value={lang} defaultValue={\"en\"} containerClassName=\"languagebox\" data={languages} itemComponent={ListItem} />\n          {this.handleRenderingSubmitButton(lang)}\n          <Button className=\"btn-reset\" onClick={this.clearForm}>\n            {resetLabel[lang]}\n          </Button>\n          <Button variant=\"danger\" onClick={onHide}>\n            {cancelLabel[lang]}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nconst mapstateToProps = (state, ownProps) => {\n  return {\n    initialValues: state.cv[\"my0:hasOtherInfo\"][ownProps.id],\n    others: retrieveBaseProperties(state.utility.otherCVInfoValues),\n    language: state.utility.language,\n    translatedProps: retrieveMainProperties(state.utility[\"my0:OtherInfo\"])\n  };\n};\n\nexport default connect(\n  mapstateToProps,\n  {\n    createOtherInfo,\n    fetchOtherCVInfoTypes,\n    updateOtherInfo,\n    fetchMainPropertiess,\n    updateCVLastUpdate,\n    updateLanguage\n  }\n)(OtherInfoModal);\n"]},"metadata":{},"sourceType":"module"}