{"ast":null,"code":"var _jsxFileName = \"/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormWorkHistory/WorkHistoryView.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrash, faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { removeWorkHistory } from \"../../../../../actions\";\nimport { retrieveCountryValues, retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\nimport { fetchCVJobTypes, fetchCountries } from \"../../../../../actions/utilityActions\";\nimport WorkHistoryModal from \"./WorkHistoryModal\";\nimport { now } from \"../../../../../translations/translations\";\nimport { renderPartialDate } from \"../../../../../utilities/utilityFunctions\";\n\nclass WorkHistoryReview extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editMode: false,\n      key: 0\n    };\n\n    this.handleCloseEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: false,\n        key: ++key\n      });\n    };\n\n    this.handleShowEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: true,\n        key: ++key\n      });\n    };\n\n    this.handleUpdateClick = () => {\n      this.setState({\n        editMode: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchCVJobTypes();\n    this.props.fetchCountries();\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let _this$props$workHisto = this.props.workHistory,\n        startDate = _this$props$workHisto[\"my0:startDate\"],\n        endDate = _this$props$workHisto[\"my0:endDate\"],\n        jobTitle = _this$props$workHisto[\"my0:jobTitle\"],\n        jobType = _this$props$workHisto[\"my0:jobType\"],\n        jobDescription = _this$props$workHisto[\"my0:jobDescription\"],\n        isCurrent = _this$props$workHisto[\"my0:isCurrent\"];\n    let _this$props$workHisto2 = this.props.workHistory[\"my0:employedIn\"],\n        orgName = _this$props$workHisto2[\"my0:orgName\"],\n        orgAddress = _this$props$workHisto2[\"my0:orgAddress\"],\n        orgWebsite = _this$props$workHisto2[\"my0:orgWebsite\"];\n    let city = orgAddress[\"my0:city\"],\n        country = orgAddress[\"my0:country\"];\n    let current = now;\n    let lang = this.props.language;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        display: \"flex\",\n        marginBottom: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, renderPartialDate(startDate), \" -\", isCurrent ? current[lang] : renderPartialDate(endDate))), React.createElement(Col, {\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, this.findTranslatedValue(jobTitle, lang), \" |\", \" \", this.renderLabel(this.props.jobtypes, jobType, lang))), React.createElement(Row, {\n      style: {\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faMapMarkerAlt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \" \", \" \", \" \", React.createElement(\"a\", {\n      href: orgWebsite,\n      className: \"inline-link\",\n      rel: \"noopener noreferrer\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, orgName), \" , \", this.findTranslatedValue(city, lang), \" \", \" \", \" \", this.renderLabel(this.props.countries, country, lang))), React.createElement(Row, {\n      style: {\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        display: \"flex\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, this.findTranslatedValue(jobDescription, lang))), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faEdit,\n      onClick: () => this.handleUpdateClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(FontAwesomeIcon, {\n      icon: faTrash,\n      onClick: () => this.props.removeWorkHistory(this.props.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }))), React.createElement(WorkHistoryModal, {\n      show: this.state.editMode,\n      id: this.props.id,\n      isUpdate: true,\n      onHide: this.handleCloseEdit,\n      key: this.state.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapstateToProps = (state, ownProps) => {\n  return {\n    language: state.utility.language,\n    countries: retrieveCountryValues(state.utility.countryValues),\n    jobtypes: retrieveBaseProperties(state.utility.jobTypeValues)\n  };\n};\n\nexport default connect(mapstateToProps, {\n  removeWorkHistory,\n  fetchCountries,\n  fetchCVJobTypes\n})(WorkHistoryReview);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormWorkHistory/WorkHistoryView.jsx"],"names":["React","Component","Row","Col","connect","FontAwesomeIcon","faEdit","faTrash","faMapMarkerAlt","removeWorkHistory","retrieveCountryValues","retrieveBaseProperties","fetchCVJobTypes","fetchCountries","WorkHistoryModal","now","renderPartialDate","WorkHistoryReview","state","editMode","key","handleCloseEdit","setState","handleShowEdit","handleUpdateClick","componentDidMount","props","findInArray","data","name","length","i","index","indexOf","newlength","renderLabel","translated","lang","undefined","findTranslatedValue","render","workHistory","startDate","endDate","jobTitle","jobType","jobDescription","isCurrent","orgName","orgAddress","orgWebsite","city","country","current","language","justifyContent","alignItems","display","marginBottom","jobtypes","countries","id","mapstateToProps","ownProps","utility","countryValues","jobTypeValues"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faEdit,\n  faTrash,\n  faMapMarkerAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { removeWorkHistory } from \"../../../../../actions\";\nimport {\n  retrieveCountryValues,\n  retrieveBaseProperties\n} from \"../../../../../utilities/utilityQueries\";\nimport {\n  fetchCVJobTypes,\n  fetchCountries\n} from \"../../../../../actions/utilityActions\";\nimport WorkHistoryModal from \"./WorkHistoryModal\";\nimport { now } from \"../../../../../translations/translations\";\nimport { renderPartialDate } from \"../../../../../utilities/utilityFunctions\";\n\nclass WorkHistoryReview extends Component {\n  state = {\n    editMode: false,\n    key: 0\n  };\n\n  componentDidMount() {\n    this.props.fetchCVJobTypes();\n    this.props.fetchCountries();\n  }\n\n  handleCloseEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: false, key: ++key });\n  };\n\n  handleShowEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: true, key: ++key });\n  };\n\n  handleUpdateClick = () => {\n    this.setState({\n      editMode: true\n    });\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let {\n      \"my0:startDate\": startDate,\n      \"my0:endDate\": endDate,\n      \"my0:jobTitle\": jobTitle,\n      \"my0:jobType\": jobType,\n      // \"my0:careerLevel\" : careerLevel,\n      \"my0:jobDescription\": jobDescription,\n      \"my0:isCurrent\": isCurrent\n    } = this.props.workHistory;\n\n    let {\n      \"my0:orgName\": orgName,\n      \"my0:orgAddress\": orgAddress,\n      \"my0:orgWebsite\": orgWebsite\n    } = this.props.workHistory[\"my0:employedIn\"];\n\n    let {\n      \"my0:city\": city,\n      \"my0:country\": country\n      // \"my0:street\" : street,\n      // \"my0:postalCode\" : postalCode,\n    } = orgAddress;\n\n    let current = now;\n\n    let lang = this.props.language;\n\n    return (\n      <React.Fragment>\n        <Row\n          style={{\n            justifyContent: \"flex-start\",\n            alignItems: \"flex-start\",\n            display: \"flex\",\n            marginBottom: \"10px\"\n          }}\n        >\n          <Col md={2}>\n            <p>\n              {renderPartialDate(startDate)} -{isCurrent ? current[lang] : renderPartialDate(endDate)}\n            </p>\n          </Col>\n          <Col md={6}>\n            <Row\n              style={{\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-start\",\n                display: \"flex\"\n              }}\n            >\n              <b>\n                {this.findTranslatedValue(jobTitle, lang)} |{\" \"}\n                {this.renderLabel(this.props.jobtypes, jobType, lang)}\n              </b>\n            </Row>\n            <Row\n              style={{\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-start\",\n                display: \"flex\"\n              }}\n            >\n              <b>\n                <FontAwesomeIcon icon={faMapMarkerAlt} /> {` `}\n                {` `}\n                <a\n                  href={orgWebsite}\n                  className=\"inline-link\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  {orgName}\n                </a>\n                {\" , \"}\n                {this.findTranslatedValue(city, lang)} {` `}{\" \"}\n                {this.renderLabel(this.props.countries, country, lang)}\n              </b>\n            </Row>\n            <Row\n              style={{\n                justifyContent: \"flex-start\",\n                alignItems: \"flex-start\",\n                display: \"flex\"\n              }}\n            >\n              {this.findTranslatedValue(jobDescription, lang)}\n            </Row>\n          </Col>\n          <Col md={4}>\n            <FontAwesomeIcon\n              icon={faEdit}\n              onClick={() => this.handleUpdateClick()}\n            />\n            <FontAwesomeIcon\n              icon={faTrash}\n              onClick={() => this.props.removeWorkHistory(this.props.id)}\n            />\n          </Col>\n        </Row>\n        <WorkHistoryModal\n          show={this.state.editMode}\n          id={this.props.id}\n          isUpdate={true}\n          onHide={this.handleCloseEdit}\n          key={this.state.key}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapstateToProps = (state, ownProps) => {\n  return {\n    language: state.utility.language,\n    countries: retrieveCountryValues(state.utility.countryValues),\n    jobtypes: retrieveBaseProperties(state.utility.jobTypeValues)\n  };\n};\n\nexport default connect(\n  mapstateToProps,\n  {\n    removeWorkHistory,\n    fetchCountries,\n    fetchCVJobTypes\n  }\n)(WorkHistoryReview);\n"]},"metadata":{},"sourceType":"module"}