{"ast":null,"code":"var _jsxFileName = \"/home/eelezi/thesis/rdf2resume/UI/src/components/Dashboard/Forms/Modals/FormOtherInfo/OtherInfoView.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { removeOtherInfo } from \"../../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport OtherInfoModal from \"./OtherInfoModal\";\nimport { fetchOtherCVInfoTypes } from \"../../../../../actions/utilityActions\";\nimport { retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\nimport { categorieLabel } from \"../../../../../translations/translations\";\n\nclass OtherInfoView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editMode: false,\n      key: 0\n    };\n\n    this.handleCloseEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: false,\n        key: ++key\n      });\n    };\n\n    this.handleShowEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: true,\n        key: ++key\n      });\n    };\n\n    this.handleUpdateClick = () => {\n      this.setState({\n        editMode: true\n      });\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchOtherCVInfoTypes();\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let otherInfoObject = this.props.otherInfoObject;\n    let lang = this.props.language;\n    return React.createElement(\"div\", {\n      class: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      style: {\n        paddingLeft: \"0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, categorieLabel[lang], \":\"), \" \", this.renderLabel(this.props.others, otherInfoObject[\"my0:otherInfoType\"], lang)), React.createElement(FontAwesomeIcon, {\n      icon: faEdit,\n      onClick: () => this.handleUpdateClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(FontAwesomeIcon, {\n      icon: faTrash,\n      onClick: () => this.props.removeOtherInfo(this.props.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      class: \"card-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.findTranslatedValue(otherInfoObject[\"my0:otherInfoDescription\"], lang)), React.createElement(OtherInfoModal, {\n      show: this.state.editMode,\n      id: this.props.id,\n      isUpdate: true,\n      onHide: this.handleCloseEdit,\n      otherInfoObject: this.props.otherInfoObject,\n      key: this.state.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapstateToProps = (state, ownProps) => {\n  return {\n    others: retrieveBaseProperties(state.utility.otherCVInfoValues),\n    language: state.utility.language\n  };\n};\n\nexport default connect(mapstateToProps, {\n  removeOtherInfo,\n  fetchOtherCVInfoTypes\n})(OtherInfoView);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/UI/src/components/Dashboard/Forms/Modals/FormOtherInfo/OtherInfoView.jsx"],"names":["React","Component","Row","Col","FontAwesomeIcon","removeOtherInfo","connect","faEdit","faTrash","OtherInfoModal","fetchOtherCVInfoTypes","retrieveBaseProperties","categorieLabel","OtherInfoView","state","editMode","key","handleCloseEdit","setState","handleShowEdit","handleUpdateClick","componentWillMount","props","findInArray","data","name","length","i","index","indexOf","newlength","renderLabel","translated","lang","undefined","findTranslatedValue","render","otherInfoObject","language","paddingLeft","others","id","mapstateToProps","ownProps","utility","otherCVInfoValues"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { removeOtherInfo } from \"../../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport OtherInfoModal from \"./OtherInfoModal\";\nimport { fetchOtherCVInfoTypes } from \"../../../../../actions/utilityActions\";\nimport { retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\nimport { categorieLabel } from \"../../../../../translations/translations\";\n\nclass OtherInfoView extends Component {\n  state = {\n    editMode: false,\n    key: 0\n  };\n\n  componentWillMount() {\n    this.props.fetchOtherCVInfoTypes();\n  }\n\n  handleCloseEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: false, key: ++key });\n  };\n\n  handleShowEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: true, key: ++key });\n  };\n\n  handleUpdateClick = () => {\n    this.setState({\n      editMode: true\n    });\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let { otherInfoObject } = this.props;\n    let lang = this.props.language;\n\n    return (\n      <div class=\"card\">\n        <div class=\"card-header\">\n          <Col md={8} style={{ paddingLeft: \"0\" }}>\n            <h4>\n              <u>{categorieLabel[lang]}:</u>{\" \"}\n              {this.renderLabel(\n                this.props.others,\n                otherInfoObject[\"my0:otherInfoType\"],\n                lang\n              )}\n            </h4>\n            <FontAwesomeIcon\n              icon={faEdit}\n              onClick={() => this.handleUpdateClick()}\n            />\n            <FontAwesomeIcon\n              icon={faTrash}\n              onClick={() => this.props.removeOtherInfo(this.props.id)}\n            />\n          </Col>\n          {/* <Col md={4}>\n           \n          </Col> */}\n        </div>\n        <div class=\"card-body\">\n          {this.findTranslatedValue(otherInfoObject[\"my0:otherInfoDescription\"], lang)}\n        </div>\n        <OtherInfoModal\n          show={this.state.editMode}\n          id={this.props.id}\n          isUpdate={true}\n          onHide={this.handleCloseEdit}\n          otherInfoObject={this.props.otherInfoObject}\n          key={this.state.key}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapstateToProps = (state, ownProps) => {\n  return {\n    others: retrieveBaseProperties(state.utility.otherCVInfoValues),\n    language: state.utility.language\n  };\n};\n\nexport default connect(\n  mapstateToProps,\n  { removeOtherInfo, fetchOtherCVInfoTypes }\n)(OtherInfoView);\n"]},"metadata":{},"sourceType":"module"}