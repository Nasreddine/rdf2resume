{"ast":null,"code":"import endpoint from \"../api/endpoint\";\nimport escoEndpoint from \"../api/escoEndpoint\";\nimport { fetchAllCountries, fetchMainProperties, fetchBaseProperties } from \"../utilities/utilityQueries\";\nimport { FETCH_ALL_COMPANY_SIZES, FETCH_ALL_IMS, FETCH_ALL_INDUSTRIES, FETCH_ALL_REGIONS, FETCH_ALL_WEBSITES, FETCH_ALL_PATENTS, FETCH_ALL_COUNTRIES, FETCH_ALL_CV_CAREER_LEVELS, FETCH_ALL_CV_JOB_MODES, FETCH_ALL_EDU_DEGREES, FETCH_ALL_GENDERS, FETCH_ALL_LANGUAGE_SELF_ASSESSMENT_PROPERTIES, FETCH_ALL_OTHER_CV_INFO_TYPES, FETCH_ALL_SKILL_CATEGORIES, FETCH_MAIN_PROPERTIES, FETCH_ALL_TITLE_PROPERTIES, TOGGLE_SPINNER, UPDATE_ERROR, UPDATE_LANGUAGE, FETCH_SKILL_SUGGESTION, FETCH_QUALIFICATION_SUGGESTION } from \"./types\";\nexport const fetchCountries = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchAllCountries()) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_COUNTRIES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchSkillCategories = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:SkillCategoryProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_SKILL_CATEGORIES,\n    payload: response.data.results.bindings\n  });\n};\nexport const updateError = value => {\n  return {\n    type: UPDATE_ERROR,\n    payload: value\n  };\n};\nexport const fetchCVCareerLevels = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:CVCareerLevel')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_CV_CAREER_LEVELS,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchCompanySizes = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:CompanySize')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_COMPANY_SIZES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchCVJobTypes = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:CVEmploymentType')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_CV_JOB_MODES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchEduDegrees = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:EduDegree')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_EDU_DEGREES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchLanguageSkillSelfAssessmentProperties = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:LanguageSkillProficiencyProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_LANGUAGE_SELF_ASSESSMENT_PROPERTIES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchTitleProperties = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:TitleProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_TITLE_PROPERTIES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchGenders = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:GenderProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_GENDERS,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchOtherCVInfoTypes = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:OtherCVInfoType')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_OTHER_CV_INFO_TYPES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchAllIMTypess = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:InstantMessagingTypeProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_IMS,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchAllIndustryTypess = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:IndustryType')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_INDUSTRIES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchAllRegionss = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:RegionProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_REGIONS,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchAllWebsiteTypess = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:WebsiteTypeProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_WEBSITES,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchAllPatentStatusess = () => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchBaseProperties('myvalue0:StatusProperty')) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_PATENTS,\n    payload: response.data.results.bindings\n  });\n};\nexport const fetchMainPropertiess = object => async dispatch => {\n  let queryUrl = \"http://localhost:3030/resume/query\" + \"?query=\" + encodeURIComponent(fetchMainProperties(object)) + \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_MAIN_PROPERTIES,\n    payload: {\n      data: response.data.results.bindings,\n      object: object\n    }\n  });\n};\nexport const fetchSkillSuggestion = (skillText, language) => async dispatch => {\n  let queryUrl = \"suggest2?type=skill&language=\" + encodeURIComponent(language) + \"&text=\" + encodeURIComponent(skillText);\n  let response = await escoEndpoint.get(queryUrl); //console.log(response);\n\n  dispatch({\n    type: FETCH_SKILL_SUGGESTION,\n    payload: response.data[\"_embedded\"].results\n  });\n};\nexport const fetchQualificationSuggestion = (quaText, language) => async dispatch => {\n  let queryUrl = \"suggest2?type=qualification&language=\" + encodeURIComponent(language) + \"&text=\" + encodeURIComponent(quaText);\n  let response = await escoEndpoint.get(queryUrl); //console.log(response);\n\n  dispatch({\n    type: FETCH_QUALIFICATION_SUGGESTION,\n    payload: response.data[\"_embedded\"].results\n  });\n};\nexport const toggleSpinner = showSpinnerBoolean => {\n  return {\n    type: TOGGLE_SPINNER,\n    payload: showSpinnerBoolean\n  };\n};\nexport const updateLanguage = value => {\n  return {\n    type: UPDATE_LANGUAGE,\n    payload: value\n  };\n};","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/src/actions/utilityActions.js"],"names":["endpoint","escoEndpoint","fetchAllCountries","fetchMainProperties","fetchBaseProperties","FETCH_ALL_COMPANY_SIZES","FETCH_ALL_IMS","FETCH_ALL_INDUSTRIES","FETCH_ALL_REGIONS","FETCH_ALL_WEBSITES","FETCH_ALL_PATENTS","FETCH_ALL_COUNTRIES","FETCH_ALL_CV_CAREER_LEVELS","FETCH_ALL_CV_JOB_MODES","FETCH_ALL_EDU_DEGREES","FETCH_ALL_GENDERS","FETCH_ALL_LANGUAGE_SELF_ASSESSMENT_PROPERTIES","FETCH_ALL_OTHER_CV_INFO_TYPES","FETCH_ALL_SKILL_CATEGORIES","FETCH_MAIN_PROPERTIES","FETCH_ALL_TITLE_PROPERTIES","TOGGLE_SPINNER","UPDATE_ERROR","UPDATE_LANGUAGE","FETCH_SKILL_SUGGESTION","FETCH_QUALIFICATION_SUGGESTION","fetchCountries","dispatch","queryUrl","encodeURIComponent","response","get","type","payload","data","results","bindings","fetchSkillCategories","updateError","value","fetchCVCareerLevels","fetchCompanySizes","fetchCVJobTypes","fetchEduDegrees","fetchLanguageSkillSelfAssessmentProperties","fetchTitleProperties","fetchGenders","fetchOtherCVInfoTypes","fetchAllIMTypess","fetchAllIndustryTypess","fetchAllRegionss","fetchAllWebsiteTypess","fetchAllPatentStatusess","fetchMainPropertiess","object","fetchSkillSuggestion","skillText","language","fetchQualificationSuggestion","quaText","toggleSpinner","showSpinnerBoolean","updateLanguage"],"mappings":"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","sourcesContent":["import endpoint from \"../api/endpoint\";\nimport escoEndpoint from \"../api/escoEndpoint\";\n\nimport {\n  fetchAllCountries,\n  fetchMainProperties,\n  fetchBaseProperties\n} from \"../utilities/utilityQueries\";\nimport {\n  FETCH_ALL_COMPANY_SIZES,\n  FETCH_ALL_IMS,\n  FETCH_ALL_INDUSTRIES,\n  FETCH_ALL_REGIONS,\n  FETCH_ALL_WEBSITES,\n  FETCH_ALL_PATENTS,\n  FETCH_ALL_COUNTRIES,\n  FETCH_ALL_CV_CAREER_LEVELS,\n  FETCH_ALL_CV_JOB_MODES,\n  FETCH_ALL_EDU_DEGREES,\n  FETCH_ALL_GENDERS,\n  FETCH_ALL_LANGUAGE_SELF_ASSESSMENT_PROPERTIES,\n  FETCH_ALL_OTHER_CV_INFO_TYPES,\n  FETCH_ALL_SKILL_CATEGORIES,\n  FETCH_MAIN_PROPERTIES,\n  FETCH_ALL_TITLE_PROPERTIES,\n  TOGGLE_SPINNER,\n  UPDATE_ERROR,\n  UPDATE_LANGUAGE,\n  FETCH_SKILL_SUGGESTION,\n  FETCH_QUALIFICATION_SUGGESTION\n} from \"./types\";\n\nexport const fetchCountries = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchAllCountries()) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_COUNTRIES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchSkillCategories = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:SkillCategoryProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_SKILL_CATEGORIES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const updateError = (value) => {\n  return {\n    type: UPDATE_ERROR,\n    payload: value\n  };\n};\n\nexport const fetchCVCareerLevels = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:CVCareerLevel')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_CV_CAREER_LEVELS,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchCompanySizes = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:CompanySize')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_COMPANY_SIZES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchCVJobTypes = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:CVEmploymentType')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_CV_JOB_MODES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchEduDegrees = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:EduDegree')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_EDU_DEGREES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchLanguageSkillSelfAssessmentProperties = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:LanguageSkillProficiencyProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_LANGUAGE_SELF_ASSESSMENT_PROPERTIES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchTitleProperties = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:TitleProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_TITLE_PROPERTIES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchGenders = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:GenderProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_GENDERS,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchOtherCVInfoTypes = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:OtherCVInfoType')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_OTHER_CV_INFO_TYPES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchAllIMTypess = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:InstantMessagingTypeProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_IMS,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchAllIndustryTypess = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:IndustryType')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_INDUSTRIES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchAllRegionss = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:RegionProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_REGIONS,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchAllWebsiteTypess = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:WebsiteTypeProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_WEBSITES,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchAllPatentStatusess = () => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchBaseProperties('myvalue0:StatusProperty')) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_ALL_PATENTS,\n    payload: response.data.results.bindings\n  });\n};\n\nexport const fetchMainPropertiess = (object) => async dispatch => {\n  let queryUrl =\n    \"http://localhost:3030/resume/query\" +\n    \"?query=\" +\n    encodeURIComponent(fetchMainProperties(object)) +\n    \"&format=json\";\n  let response = await endpoint.get(queryUrl);\n  dispatch({\n    type: FETCH_MAIN_PROPERTIES,\n    payload: {\n      data: response.data.results.bindings,\n      object: object\n    }\n  });\n};\n\nexport const fetchSkillSuggestion = (skillText, language) => async dispatch => {\n  let queryUrl =\n    \"suggest2?type=skill&language=\" + encodeURIComponent(language) + \"&text=\" +\n    encodeURIComponent(skillText);\n  let response = await escoEndpoint.get(queryUrl);\n  //console.log(response);\n  dispatch({\n    type: FETCH_SKILL_SUGGESTION,\n    payload: response.data[\"_embedded\"].results,\n  });\n};\n\nexport const fetchQualificationSuggestion = (quaText, language) => async dispatch => {\n  let queryUrl =\n    \"suggest2?type=qualification&language=\" + encodeURIComponent(language) + \"&text=\" +\n    encodeURIComponent(quaText);\n  let response = await escoEndpoint.get(queryUrl);\n  //console.log(response);\n  dispatch({\n    type: FETCH_QUALIFICATION_SUGGESTION,\n    payload: response.data[\"_embedded\"].results,\n  });\n};\n\n\nexport const toggleSpinner = (showSpinnerBoolean) => {\n  return {\n    type: TOGGLE_SPINNER,\n    payload: showSpinnerBoolean\n  }\n}\n\nexport const updateLanguage = (value) => {\n  return {\n    type: UPDATE_LANGUAGE,\n    payload: value\n  }\n}"]},"metadata":{},"sourceType":"module"}