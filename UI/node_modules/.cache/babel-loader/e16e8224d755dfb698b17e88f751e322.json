{"ast":null,"code":"import _objectSpread from \"/home/eelezi/thesis/rdf2resume/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormSkill/SkillModal.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Combobox } from \"react-widgets\";\nimport { Modal, Row, Col, Button } from \"react-bootstrap\";\nimport CustomTextarea from \"../../../../core/CustomTextarea\";\nimport { createOtherSkill, updateOtherSkill } from \"../../../../../actions\";\nimport CustomInput from \"../../../../core/CustomInput\";\nimport CustomCheckbox from \"../../../../core/CustomCheckbox\";\nimport { fetchMainPropertiess, fetchSkillCategories } from \"../../../../../actions/utilityActions\";\nimport { retrieveMainProperties, retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\nimport { cancelLabel, resetLabel, saveLabel, updateLabel } from \"../../../../../translations/translations\";\nimport CustomLevelButton from \"../../../../core/CustomLevelButton\";\nimport { skillAddTitle, skillUpdateTitle } from \"../../../../../translations/translations\";\n\nclass SkillModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      otherSkill: {\n        \"@type\": \"my0:Skill\",\n        \"my0:skillName\": \"\",\n        \"my0:skillDescription\": \"\",\n        \"my0:skillCategory\": \"\",\n        \"my0:skillLevel\": \"\",\n        \"my0:skillHasCertificate\": true\n      }\n    };\n\n    this.setInitialValues = () => {\n      if (this.props.id !== null && this.props.isUpdate === true) {\n        let inputRef = this.props.initialValues;\n\n        let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n        otherSkill[\"my0:skillName\"] = inputRef[\"my0:skillName\"];\n        otherSkill[\"my0:skillCategory\"] = inputRef[\"my0:skillCategory\"];\n        otherSkill[\"my0:skillDescription\"] = inputRef[\"my0:skillDescription\"];\n        otherSkill[\"my0:skillLevel\"] = inputRef[\"my0:skillLevel\"];\n        otherSkill[\"my0:skillHasCertificate\"] = inputRef[\"my0:skillHasCertificate\"];\n        this.setState({\n          otherSkill\n        });\n      }\n    };\n\n    this.clearForm = () => {\n      if (!this.props.isUpdate) {\n        this.setState({\n          otherSkill: {\n            \"@type\": \"my0:Skill\",\n            \"my0:skillName\": \"\",\n            \"my0:skillDescription\": \"\",\n            \"my0:skillCategory\": \"\",\n            \"my0:skillLevel\": \"\",\n            \"my0:skillHasCertificate\": true\n          }\n        });\n      } else {\n        this.setInitialValues();\n      }\n    };\n\n    this.handleCheckboxChange = e => {\n      let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n      otherSkill[e.target.id] = e.target.checked;\n      this.setState({\n        otherSkill\n      });\n    };\n\n    this.handleInputChange = e => {\n      let label = e.target.id;\n\n      let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n      otherSkill[label] = e.target.value;\n      this.setState({\n        otherSkill\n      });\n    };\n\n    this.handleSelectChange = (value, id) => {\n      let obj = _objectSpread({}, this.state.otherSkill);\n\n      let label = id;\n      obj[label] = value[\"@type\"];\n      this.setState({\n        otherSkill: obj\n      });\n    };\n\n    this.handleSave = e => {\n      e.preventDefault();\n      this.props.createOtherSkill(this.state.otherSkill);\n    };\n\n    this.handleUpdate = e => {\n      this.props.updateOtherSkill({\n        object: this.state.otherSkill,\n        index: this.props.id\n      });\n    };\n\n    this.handleRenderingSubmitButton = lang => {\n      let isDisabled = this.state.otherSkill[\"my0:skillName\"] === \"\" || this.state.otherSkill[\"my0:skillCategory\"] === \"\" || this.state.otherSkill[\"my0:skillLevel\"] === \"\";\n\n      if (!this.props.isUpdate) {\n        return React.createElement(Button, {\n          disabled: isDisabled,\n          type: \"submit\",\n          variant: \"primary\",\n          onClick: this.handleSave,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, saveLabel[lang]);\n      } else {\n        return React.createElement(Button, {\n          disabled: isDisabled,\n          type: \"submit\",\n          variant: \"primary\",\n          onClick: this.handleUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, updateLabel[lang]);\n      }\n    };\n\n    this.handleLevelClick = e => {\n      let label = \"my0:skillLevel\";\n\n      let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n      otherSkill[label] = e.target.id;\n      this.setState({\n        otherSkill\n      });\n    };\n  }\n\n  componentWillMount() {\n    this.setInitialValues();\n    this.props.fetchSkillCategories();\n    this.props.fetchMainPropertiess(\"my0:Skill\");\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  render() {\n    let _this$state$otherSkil = this.state.otherSkill,\n        skillName = _this$state$otherSkil[\"my0:skillName\"],\n        skillCategory = _this$state$otherSkil[\"my0:skillCategory\"],\n        skillDescription = _this$state$otherSkil[\"my0:skillDescription\"],\n        skillHasCertificate = _this$state$otherSkil[\"my0:skillHasCertificate\"],\n        skillLevel = _this$state$otherSkil[\"my0:skillLevel\"];\n    let onHide = this.props.onHide;\n    let lang = this.props.language;\n    let translatedProps = this.props.translatedProps;\n    return React.createElement(Modal, {\n      show: this.props.show,\n      onHide: this.props.onHide,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      className: \"reference-modal\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.props.isUpdate ? skillUpdateTitle[lang] : skillAddTitle[lang]), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    })))), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(CustomInput, {\n      id: \"my0:skillName\",\n      label: this.renderLabel(translatedProps, \"skillName\", lang) + \" *\",\n      type: \"text\",\n      value: skillName,\n      handleChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"skillLevel\", lang) + \" *\"), React.createElement(CustomLevelButton, {\n      id: \"my0:skillLevel\",\n      label: \"Skill Level\",\n      filledNumber: skillLevel,\n      handleClick: this.handleLevelClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      style: {\n        width: \"100%\",\n        justifyContent: \"left\",\n        marginLeft: \"0px\",\n        marginBottom: \"8px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"skillCategory\", lang)), React.createElement(Combobox, {\n      name: \"my0:skillCategory\",\n      placeholder: this.renderLabel(translatedProps, \"skillCategory\", lang) + \" *\",\n      data: this.props.categories,\n      textField: lang,\n      valueField: \"@type\",\n      value: skillCategory,\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleSelectChange(value, \"my0:skillCategory\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    })), React.createElement(CustomTextarea, {\n      id: \"my0:skillDescription\",\n      label: this.renderLabel(translatedProps, \"skillDescription\", lang),\n      value: skillDescription,\n      handleChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), React.createElement(CustomCheckbox, {\n      id: \"my0:skillHasCertificate\",\n      type: \"checkbox\",\n      label: this.renderLabel(translatedProps, \"skillHasCertificate\", lang),\n      checked: skillHasCertificate,\n      handleChange: this.handleCheckboxChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, this.handleRenderingSubmitButton(lang), React.createElement(Button, {\n      className: \"btn-reset\",\n      onClick: this.clearForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, resetLabel[lang]), React.createElement(Button, {\n      variant: \"danger\",\n      onClick: onHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, cancelLabel[lang])));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    initialValues: state.cv[\"my0:hasSkill\"][ownProps.id],\n    language: state.utility.language,\n    categories: retrieveBaseProperties(state.utility.skillCategories),\n    translatedProps: retrieveMainProperties(state.utility[\"my0:Skill\"])\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchSkillCategories,\n  createOtherSkill,\n  updateOtherSkill,\n  fetchMainPropertiess\n})(SkillModal);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormSkill/SkillModal.jsx"],"names":["React","Component","connect","Combobox","Modal","Row","Col","Button","CustomTextarea","createOtherSkill","updateOtherSkill","CustomInput","CustomCheckbox","fetchMainPropertiess","fetchSkillCategories","retrieveMainProperties","retrieveBaseProperties","cancelLabel","resetLabel","saveLabel","updateLabel","CustomLevelButton","skillAddTitle","skillUpdateTitle","SkillModal","state","otherSkill","setInitialValues","props","id","isUpdate","inputRef","initialValues","setState","clearForm","handleCheckboxChange","e","target","checked","handleInputChange","label","value","handleSelectChange","obj","handleSave","preventDefault","handleUpdate","object","index","handleRenderingSubmitButton","lang","isDisabled","handleLevelClick","componentWillMount","findInArray","data","name","length","i","indexOf","newlength","renderLabel","translated","undefined","render","skillName","skillCategory","skillDescription","skillHasCertificate","skillLevel","onHide","language","translatedProps","show","width","justifyContent","marginLeft","marginBottom","categories","mapStateToProps","ownProps","cv","utility","skillCategories"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Combobox } from \"react-widgets\";\nimport { Modal, Row, Col, Button } from \"react-bootstrap\";\nimport CustomTextarea from \"../../../../core/CustomTextarea\";\nimport { createOtherSkill, updateOtherSkill } from \"../../../../../actions\";\nimport CustomInput from \"../../../../core/CustomInput\";\nimport CustomCheckbox from \"../../../../core/CustomCheckbox\";\nimport {\n  fetchMainPropertiess,\n  fetchSkillCategories\n} from \"../../../../../actions/utilityActions\";\nimport {\n  retrieveMainProperties,\n  retrieveBaseProperties\n} from \"../../../../../utilities/utilityQueries\";\nimport {\n  cancelLabel,\n  resetLabel,\n  saveLabel,\n  updateLabel\n} from \"../../../../../translations/translations\";\nimport CustomLevelButton from \"../../../../core/CustomLevelButton\";\nimport {\n  skillAddTitle,\n  skillUpdateTitle\n} from \"../../../../../translations/translations\";\n\nclass SkillModal extends Component {\n  state = {\n    otherSkill: {\n      \"@type\": \"my0:Skill\",\n      \"my0:skillName\": \"\",\n      \"my0:skillDescription\": \"\",\n      \"my0:skillCategory\": \"\",\n      \"my0:skillLevel\": \"\",\n      \"my0:skillHasCertificate\": true\n    }\n  };\n\n  componentWillMount() {\n    this.setInitialValues();\n    this.props.fetchSkillCategories();\n    this.props.fetchMainPropertiess(\"my0:Skill\");\n  }\n\n  setInitialValues = () => {\n    if (this.props.id !== null && this.props.isUpdate === true) {\n      let inputRef = this.props.initialValues;\n      let otherSkill = { ...this.state.otherSkill };\n      otherSkill[\"my0:skillName\"] = inputRef[\"my0:skillName\"];\n      otherSkill[\"my0:skillCategory\"] = inputRef[\"my0:skillCategory\"];\n      otherSkill[\"my0:skillDescription\"] = inputRef[\"my0:skillDescription\"];\n      otherSkill[\"my0:skillLevel\"] = inputRef[\"my0:skillLevel\"];\n      otherSkill[\"my0:skillHasCertificate\"] =\n        inputRef[\"my0:skillHasCertificate\"];\n      this.setState({\n        otherSkill\n      });\n    }\n  };\n\n  clearForm = () => {\n    if (!this.props.isUpdate) {\n      this.setState({\n        otherSkill: {\n          \"@type\": \"my0:Skill\",\n          \"my0:skillName\": \"\",\n          \"my0:skillDescription\": \"\",\n          \"my0:skillCategory\": \"\",\n          \"my0:skillLevel\": \"\",\n          \"my0:skillHasCertificate\": true\n        }\n      });\n    } else {\n      this.setInitialValues();\n    }\n  };\n\n  handleCheckboxChange = e => {\n    let otherSkill = { ...this.state.otherSkill };\n    otherSkill[e.target.id] = e.target.checked;\n    this.setState({\n      otherSkill\n    });\n  };\n\n  handleInputChange = e => {\n    let label = e.target.id;\n    let otherSkill = { ...this.state.otherSkill };\n    otherSkill[label] = e.target.value;\n    this.setState({\n      otherSkill\n    });\n  };\n\n  handleSelectChange = (value, id) => {\n    let obj = { ...this.state.otherSkill };\n    let label = id;\n    obj[label] = value[\"@type\"];\n    this.setState({\n      otherSkill: obj\n    });\n  };\n\n  handleSave = e => {\n    e.preventDefault();\n    this.props.createOtherSkill(this.state.otherSkill);\n  };\n\n  handleUpdate = e => {\n    this.props.updateOtherSkill({\n      object: this.state.otherSkill,\n      index: this.props.id\n    });\n  };\n\n  handleRenderingSubmitButton = lang => {\n    let isDisabled =\n      this.state.otherSkill[\"my0:skillName\"] === \"\" ||\n      this.state.otherSkill[\"my0:skillCategory\"] === \"\" ||\n      this.state.otherSkill[\"my0:skillLevel\"] === \"\";\n    if (!this.props.isUpdate) {\n      return (\n        <Button\n          disabled={isDisabled}\n          type=\"submit\"\n          variant=\"primary\"\n          onClick={this.handleSave}\n        >\n          {saveLabel[lang]}\n        </Button>\n      );\n    } else {\n      return (\n        <Button\n          disabled={isDisabled}\n          type=\"submit\"\n          variant=\"primary\"\n          onClick={this.handleUpdate}\n        >\n          {updateLabel[lang]}\n        </Button>\n      );\n    }\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  handleLevelClick = e => {\n    let label = \"my0:skillLevel\";\n    let otherSkill = { ...this.state.otherSkill };\n    otherSkill[label] = e.target.id;\n    this.setState({\n      otherSkill\n    });\n  };\n\n  render() {\n    let {\n      \"my0:skillName\": skillName,\n      \"my0:skillCategory\": skillCategory,\n      \"my0:skillDescription\": skillDescription,\n      \"my0:skillHasCertificate\": skillHasCertificate,\n      \"my0:skillLevel\": skillLevel\n    } = this.state.otherSkill;\n\n    let { onHide } = this.props;\n\n    let lang = this.props.language;\n\n    let { translatedProps } = this.props;\n\n    return (\n      <Modal\n        show={this.props.show}\n        onHide={this.props.onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        className=\"reference-modal\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <Row>\n              <Col md={4}>\n                {this.props.isUpdate\n                  ? skillUpdateTitle[lang]\n                  : skillAddTitle[lang]}\n              </Col>\n              <Col md={8} />\n            </Row>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Row>\n            <Col md={8}>\n              <CustomInput\n                id=\"my0:skillName\"\n                label={\n                  this.renderLabel(translatedProps, \"skillName\", lang) + \" *\"\n                }\n                type=\"text\"\n                value={skillName}\n                handleChange={this.handleInputChange}\n              />\n            </Col>\n            <Col md={4}>\n              <label className=\"label-rw\">\n                {this.renderLabel(translatedProps, \"skillLevel\", lang) + \" *\"}\n              </label>\n              <CustomLevelButton\n                id=\"my0:skillLevel\"\n                label=\"Skill Level\"\n                filledNumber={skillLevel}\n                handleClick={this.handleLevelClick}\n              />\n            </Col>\n          </Row>\n          <Row\n            style={{\n              width: \"100%\",\n              justifyContent: \"left\",\n              marginLeft: \"0px\",\n              marginBottom: \"8px\"\n            }}\n          >\n            <label className=\"label-rw\">\n              {this.renderLabel(translatedProps, \"skillCategory\", lang)}\n            </label>\n            <Combobox\n              name=\"my0:skillCategory\"\n              placeholder={\n                this.renderLabel(translatedProps, \"skillCategory\", lang) + \" *\"\n              }\n              data={this.props.categories}\n              textField={lang}\n              valueField=\"@type\"\n              value={skillCategory}\n              caseSensitive={false}\n              minLength={3}\n              filter=\"contains\"\n              onChange={value =>\n                this.handleSelectChange(value, \"my0:skillCategory\")\n              }\n            />\n          </Row>\n          <CustomTextarea\n            id=\"my0:skillDescription\"\n            label={this.renderLabel(translatedProps, \"skillDescription\", lang)}\n            value={skillDescription}\n            handleChange={this.handleInputChange}\n          />\n          <CustomCheckbox\n            id=\"my0:skillHasCertificate\"\n            type=\"checkbox\"\n            label={this.renderLabel(\n              translatedProps,\n              \"skillHasCertificate\",\n              lang\n            )}\n            checked={skillHasCertificate}\n            handleChange={this.handleCheckboxChange}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          {this.handleRenderingSubmitButton(lang)}\n          <Button className=\"btn-reset\" onClick={this.clearForm}>\n            {resetLabel[lang]}\n          </Button>\n          <Button variant=\"danger\" onClick={onHide}>\n            {cancelLabel[lang]}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    initialValues: state.cv[\"my0:hasSkill\"][ownProps.id],\n    language: state.utility.language,\n    categories: retrieveBaseProperties(state.utility.skillCategories),\n    translatedProps: retrieveMainProperties(state.utility[\"my0:Skill\"])\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchSkillCategories,\n    createOtherSkill,\n    updateOtherSkill,\n    fetchMainPropertiess\n  }\n)(SkillModal);\n"]},"metadata":{},"sourceType":"module"}