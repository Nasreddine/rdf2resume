{"ast":null,"code":"var _jsxFileName = \"/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/FormTarget.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport CustomInput from \"../../core/CustomInput\";\nimport CustomTextarea from \"../../core/CustomTextarea\";\nimport CustomCheckbox from \"../../core/CustomCheckbox\";\nimport { Combobox, Multiselect } from \"react-widgets\";\nimport { connect } from \"react-redux\";\nimport { updateTarget, updateCVLastUpdate } from \"../../../actions\";\nimport { fetchCVJobModes, fetchCVCareerLevels, fetchCountries, fetchCompanySizes, fetchAllRegionss, fetchAllIndustryTypess, fetchMainPropertiess } from \"../../../actions/utilityActions\";\nimport { retrieveCountryValues, retrieveMainProperties, retrieveBaseProperties } from \"../../../utilities/utilityQueries\";\nimport { targetTitleCompany, targetTitleJob } from \"../../../translations/translations\";\n\nclass FormTarget extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n\n    this.handleInputChange = e => {\n      this.props.updateTarget({\n        id: e.target.id,\n        value: e.target.value\n      });\n      this.props.updateCVLastUpdate();\n    };\n\n    this.handleInputChangeWithLanguage = (e, lang) => {\n      this.props.updateTarget({\n        id: e.target.id,\n        value: e.target.value,\n        language: lang\n      });\n      this.props.updateCVLastUpdate();\n    };\n\n    this.handleCheckboxChange = e => {\n      this.props.updateTarget({\n        id: e.target.id,\n        value: e.target.checked\n      });\n      this.props.updateCVLastUpdate();\n    };\n\n    this.handleSelectChange = (name, value) => {\n      this.props.updateTarget({\n        id: name,\n        value: value[\"@type\"]\n      });\n      this.props.updateCVLastUpdate();\n    };\n\n    this.handleMultiSelectChange = (name, value) => {\n      let myarr = [];\n      let length = value.length;\n\n      for (let i = 0; i < length; i++) {\n        myarr.push(value[i][\"@type\"]);\n      }\n\n      this.props.updateTarget({\n        id: name,\n        value: myarr\n      });\n      this.props.updateCVLastUpdate();\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchCVCareerLevels();\n    this.props.fetchCVJobModes();\n    this.props.fetchCompanySizes();\n    this.props.fetchCountries();\n    this.props.fetchAllIndustryTypess();\n    this.props.fetchAllRegionss();\n    this.props.fetchMainPropertiess(\"my0:Target\");\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@type\"].indexOf(name) >= 0) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let _this$props$target = this.props.target,\n        targetCompanySize = _this$props$target[\"my0:targetCompanySize\"],\n        targetCompanyField = _this$props$target[\"my0:targetCompanyField\"],\n        targetRegion = _this$props$target[\"my0:targetRegion\"],\n        targetCareerLevel = _this$props$target[\"my0:targetCareerLevel\"],\n        targetJobMode = _this$props$target[\"my0:targetJobMode\"],\n        targetWeeksNoticePeriod = _this$props$target[\"my0:targetWeeksNoticePeriod\"],\n        targetJobTitle = _this$props$target[\"my0:targetJobTitle\"],\n        conditionWillTravel = _this$props$target[\"my0:targetConditionWillTravel\"],\n        conditionWillRelocate = _this$props$target[\"my0:targetConditionWillRelocate\"],\n        targetJobDescription = _this$props$target[\"my0:targetJobDescription\"],\n        targetCompanyDescription = _this$props$target[\"my0:targetCompanyDescription\"],\n        targetCountry = _this$props$target[\"my0:targetCountry\"],\n        targetSalaryRange = _this$props$target[\"my0:targetSalaryRange\"];\n    let lang = this.props.language;\n    console.log(lang);\n    let translatedProps = this.props.translatedProps;\n    return React.createElement(Row, {\n      className: \"main-content-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, targetTitleJob[lang]), React.createElement(CustomInput, {\n      id: \"targetJobTitle\",\n      label: this.renderLabel(translatedProps, \"targetJobTitle\", lang),\n      type: \"text\",\n      value: this.findTranslatedValue(targetJobTitle, lang),\n      handleChange: e => this.handleInputChangeWithLanguage(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"targetJobMode\", lang)), React.createElement(Combobox, {\n      name: \"targetJobMode\",\n      placeholder: this.renderLabel(translatedProps, \"targetJobMode\", lang),\n      data: this.props.jobModes,\n      textField: lang,\n      valueField: \"@type\",\n      value: targetJobMode,\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleSelectChange(\"targetJobMode\", value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \" \", this.renderLabel(translatedProps, \"targetCareerLevel\", lang)), React.createElement(Combobox, {\n      name: \"targetCareerLevel\",\n      data: this.props.careerLevels,\n      textField: lang,\n      valueField: \"@type\",\n      value: targetCareerLevel,\n      placeholder: this.renderLabel(translatedProps, \"targetCareerLevel\", lang),\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleSelectChange(\"targetCareerLevel\", value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      id: \"targetSalaryRange\",\n      label: this.renderLabel(translatedProps, \"targetSalaryRange\", lang),\n      type: \"text\",\n      value: targetSalaryRange,\n      handleChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      id: \"targetWeeksNoticePeriod\",\n      label: this.renderLabel(translatedProps, \"targetWeeksNoticePeriod\", lang),\n      type: \"text\",\n      value: this.findTranslatedValue(targetWeeksNoticePeriod, lang),\n      handleChange: e => this.handleInputChangeWithLanguage(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }), React.createElement(CustomCheckbox, {\n      id: \"targetConditionWillRelocate\",\n      type: \"checkbox\",\n      label: this.renderLabel(translatedProps, \"targetConditionWillRelocate\", lang),\n      checked: conditionWillRelocate,\n      handleChange: this.handleCheckboxChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        marginTop: \"10px\",\n        marginBottom: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(CustomCheckbox, {\n      id: \"targetConditionWillTravel\",\n      type: \"checkbox\",\n      label: this.renderLabel(translatedProps, \"targetConditionWillTravel\", lang),\n      checked: conditionWillTravel,\n      handleChange: this.handleCheckboxChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })), React.createElement(CustomTextarea, {\n      id: \"targetJobDescription\",\n      label: this.renderLabel(translatedProps, \"targetJobDescription\", lang),\n      value: this.findTranslatedValue(targetJobDescription, lang),\n      handleChange: e => this.handleInputChangeWithLanguage(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, targetTitleCompany[lang]), React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"targetRegion\", lang)), React.createElement(Multiselect, {\n      name: \"targetRegion\",\n      data: this.props.regions,\n      textField: lang,\n      valueField: \"@type\",\n      value: targetRegion,\n      placeholder: this.renderLabel(translatedProps, \"targetRegion\", lang),\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleMultiSelectChange(\"targetRegion\", value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"targetCountry\", lang)), React.createElement(Multiselect, {\n      name: \"targetCountry\",\n      data: this.props.countries,\n      textField: lang,\n      valueField: \"@type\",\n      value: targetCountry,\n      placeholder: this.renderLabel(translatedProps, \"targetCountry\", lang),\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleMultiSelectChange(\"targetCountry\", value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"targetCompanySize\", lang)), React.createElement(Combobox, {\n      name: \"targetCompanySize\",\n      data: this.props.companySizes,\n      value: targetCompanySize,\n      textField: lang,\n      valueField: \"@type\",\n      placeholder: this.renderLabel(translatedProps, \"targetCompanySize\", lang),\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleSelectChange(\"targetCompanySize\", value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"targetCompanyField\", lang)), React.createElement(Multiselect, {\n      name: \"targetCompanyField\",\n      data: this.props.industries,\n      value: targetCompanyField,\n      textField: lang,\n      valueField: \"@type\",\n      placeholder: this.renderLabel(translatedProps, \"targetCompanyField\", lang),\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleMultiSelectChange(\"targetCompanyField\", value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"mb-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(CustomTextarea, {\n      id: \"targetCompanyDescription\",\n      label: this.renderLabel(translatedProps, \"targetCompanyDescription\", lang),\n      value: this.findTranslatedValue(targetCompanyDescription, lang),\n      handleChange: e => this.handleInputChangeWithLanguage(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \" \"));\n  }\n\n}\n\nconst mapstateToProps = state => {\n  return {\n    countries: retrieveCountryValues(state.utility.countryValues),\n    jobModes: retrieveBaseProperties(state.utility.jobModeValues),\n    careerLevels: retrieveBaseProperties(state.utility.careerLevelValues),\n    companySizes: retrieveBaseProperties(state.utility.companySizeValues),\n    regions: retrieveBaseProperties(state.utility.regions),\n    industries: retrieveBaseProperties(state.utility.industries),\n    target: state.cv[\"my0:hasTarget\"],\n    language: state.utility.language,\n    translatedProps: retrieveMainProperties(state.utility[\"my0:Target\"])\n  };\n};\n\nexport default connect(mapstateToProps, {\n  fetchCVJobModes,\n  fetchCVCareerLevels,\n  fetchCountries,\n  fetchCompanySizes,\n  fetchMainPropertiess,\n  fetchAllRegionss,\n  fetchAllIndustryTypess,\n  updateTarget,\n  updateCVLastUpdate\n})(FormTarget);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/FormTarget.jsx"],"names":["React","Component","Row","Col","CustomInput","CustomTextarea","CustomCheckbox","Combobox","Multiselect","connect","updateTarget","updateCVLastUpdate","fetchCVJobModes","fetchCVCareerLevels","fetchCountries","fetchCompanySizes","fetchAllRegionss","fetchAllIndustryTypess","fetchMainPropertiess","retrieveCountryValues","retrieveMainProperties","retrieveBaseProperties","targetTitleCompany","targetTitleJob","FormTarget","state","handleInputChange","e","props","id","target","value","handleInputChangeWithLanguage","lang","language","handleCheckboxChange","checked","handleSelectChange","name","handleMultiSelectChange","myarr","length","i","push","componentWillMount","findInArray","data","indexOf","renderLabel","translated","index","undefined","findTranslatedValue","render","targetCompanySize","targetCompanyField","targetRegion","targetCareerLevel","targetJobMode","targetWeeksNoticePeriod","targetJobTitle","conditionWillTravel","conditionWillRelocate","targetJobDescription","targetCompanyDescription","targetCountry","targetSalaryRange","console","log","translatedProps","jobModes","careerLevels","marginTop","marginBottom","regions","countries","companySizes","industries","mapstateToProps","utility","countryValues","jobModeValues","careerLevelValues","companySizeValues","cv"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport CustomInput from \"../../core/CustomInput\";\nimport CustomTextarea from \"../../core/CustomTextarea\";\nimport CustomCheckbox from \"../../core/CustomCheckbox\";\nimport { Combobox, Multiselect } from \"react-widgets\";\nimport { connect } from \"react-redux\";\nimport { updateTarget, updateCVLastUpdate } from \"../../../actions\";\nimport {\n  fetchCVJobModes,\n  fetchCVCareerLevels,\n  fetchCountries,\n  fetchCompanySizes,\n  fetchAllRegionss,\n  fetchAllIndustryTypess,\n  fetchMainPropertiess\n} from \"../../../actions/utilityActions\";\nimport {\n  retrieveCountryValues,\n  retrieveMainProperties,\n  retrieveBaseProperties\n} from \"../../../utilities/utilityQueries\";\nimport {\n  targetTitleCompany,\n  targetTitleJob\n} from \"../../../translations/translations\";\n\nclass FormTarget extends Component {\n  state = {};\n\n  componentWillMount() {\n    this.props.fetchCVCareerLevels();\n    this.props.fetchCVJobModes();\n    this.props.fetchCompanySizes();\n    this.props.fetchCountries();\n    this.props.fetchAllIndustryTypess();\n    this.props.fetchAllRegionss();\n    this.props.fetchMainPropertiess(\"my0:Target\");\n  }\n\n  handleInputChange = e => {\n    this.props.updateTarget({ id: e.target.id, value: e.target.value });\n    this.props.updateCVLastUpdate();\n  };\n\n  handleInputChangeWithLanguage = (e, lang) => {\n    this.props.updateTarget({ id: e.target.id, value: e.target.value, language: lang });\n    this.props.updateCVLastUpdate();\n  };\n\n  handleCheckboxChange = e => {\n    this.props.updateTarget({ id: e.target.id, value: e.target.checked });\n    this.props.updateCVLastUpdate();\n  };\n\n  handleSelectChange = (name, value) => {\n    this.props.updateTarget({ id: name, value: value[\"@type\"] });\n    this.props.updateCVLastUpdate();\n  };\n\n  handleMultiSelectChange = (name, value) => {\n    let myarr = [];\n    let length = value.length;\n    for (let i = 0; i < length; i++) {\n      myarr.push(value[i][\"@type\"]);\n    }\n    this.props.updateTarget({ id: name, value: myarr });\n    this.props.updateCVLastUpdate();\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@type\"].indexOf(name) >= 0) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let {\n      \"my0:targetCompanySize\": targetCompanySize,\n      \"my0:targetCompanyField\": targetCompanyField,\n      \"my0:targetRegion\": targetRegion,\n      \"my0:targetCareerLevel\": targetCareerLevel,\n      \"my0:targetJobMode\": targetJobMode,\n      \"my0:targetWeeksNoticePeriod\": targetWeeksNoticePeriod,\n      \"my0:targetJobTitle\": targetJobTitle,\n      \"my0:targetConditionWillTravel\": conditionWillTravel,\n      \"my0:targetConditionWillRelocate\": conditionWillRelocate,\n      \"my0:targetJobDescription\": targetJobDescription,\n      \"my0:targetCompanyDescription\": targetCompanyDescription,\n      \"my0:targetCountry\": targetCountry,\n      \"my0:targetSalaryRange\": targetSalaryRange\n    } = this.props.target;\n\n    let lang = this.props.language;\n    console.log(lang);\n\n    let translatedProps = this.props.translatedProps;\n\n    return (\n      <Row className=\"main-content-row\">\n        <Col md={4}>\n          <h4>{targetTitleJob[lang]}</h4>\n          <CustomInput\n            id=\"targetJobTitle\"\n            label={this.renderLabel(translatedProps, \"targetJobTitle\", lang)}\n            type=\"text\"\n            value={this.findTranslatedValue(targetJobTitle, lang)}\n            handleChange={(e) => this.handleInputChangeWithLanguage(e, lang)}\n          />\n          <label className=\"label-rw\">\n            {this.renderLabel(translatedProps, \"targetJobMode\", lang)}\n          </label>\n          <Combobox\n            name=\"targetJobMode\"\n            placeholder={this.renderLabel(\n              translatedProps,\n              \"targetJobMode\",\n              lang\n            )}\n            data={this.props.jobModes}\n            textField={lang}\n            valueField=\"@type\"\n            value={targetJobMode}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n            onChange={value => this.handleSelectChange(\"targetJobMode\", value)}\n          />\n          <label className=\"label-rw\">\n            {\" \"}\n            {this.renderLabel(translatedProps, \"targetCareerLevel\", lang)}\n          </label>\n          <Combobox\n            name=\"targetCareerLevel\"\n            data={this.props.careerLevels}\n            textField={lang}\n            valueField=\"@type\"\n            value={targetCareerLevel}\n            placeholder={this.renderLabel(\n              translatedProps,\n              \"targetCareerLevel\",\n              lang\n            )}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n            onChange={value =>\n              this.handleSelectChange(\"targetCareerLevel\", value)\n            }\n          />\n          <CustomInput\n            id=\"targetSalaryRange\"\n            label={this.renderLabel(translatedProps, \"targetSalaryRange\", lang)}\n            type=\"text\"\n            value={targetSalaryRange}\n            handleChange={this.handleInputChange}\n          />\n          <CustomInput\n            id=\"targetWeeksNoticePeriod\"\n            label={this.renderLabel(\n              translatedProps,\n              \"targetWeeksNoticePeriod\",\n              lang\n            )}\n            type=\"text\"\n            value={this.findTranslatedValue(targetWeeksNoticePeriod, lang)}\n            handleChange={(e) => this.handleInputChangeWithLanguage(e, lang)}\n          />\n          <div className=\"mb-3\" />\n          <CustomCheckbox\n            id=\"targetConditionWillRelocate\"\n            type=\"checkbox\"\n            label={this.renderLabel(\n              translatedProps,\n              \"targetConditionWillRelocate\",\n              lang\n            )}\n            checked={conditionWillRelocate}\n            handleChange={this.handleCheckboxChange}\n          />\n          <div style={{ marginTop: \"10px\", marginBottom: \"10px\" }}>\n            <CustomCheckbox\n              id=\"targetConditionWillTravel\"\n              type=\"checkbox\"\n              label={this.renderLabel(\n                translatedProps,\n                \"targetConditionWillTravel\",\n                lang\n              )}\n              checked={conditionWillTravel}\n              handleChange={this.handleCheckboxChange}\n            />\n          </div>\n          <CustomTextarea\n            id=\"targetJobDescription\"\n            label={this.renderLabel(\n              translatedProps,\n              \"targetJobDescription\",\n              lang\n            )}\n            value={this.findTranslatedValue(targetJobDescription, lang)}\n            handleChange={(e) => this.handleInputChangeWithLanguage(e, lang)}\n          />\n        </Col>\n        <Col md={4}>\n          <h4>{targetTitleCompany[lang]}</h4>\n          <label className=\"label-rw\">\n            {this.renderLabel(translatedProps, \"targetRegion\", lang)}\n          </label>\n          <Multiselect\n            name=\"targetRegion\"\n            data={this.props.regions}\n            textField={lang}\n            valueField=\"@type\"\n            value={targetRegion}\n            placeholder={this.renderLabel(\n              translatedProps,\n              \"targetRegion\",\n              lang\n            )}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n            onChange={value =>\n              this.handleMultiSelectChange(\"targetRegion\", value)\n            }\n          />\n          <label className=\"label-rw\">\n            {this.renderLabel(translatedProps, \"targetCountry\", lang)}\n          </label>\n          <Multiselect\n            name=\"targetCountry\"\n            data={this.props.countries}\n            textField={lang}\n            valueField=\"@type\"\n            value={targetCountry}\n            placeholder={this.renderLabel(\n              translatedProps,\n              \"targetCountry\",\n              lang\n            )}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n            onChange={value =>\n              this.handleMultiSelectChange(\"targetCountry\", value)\n            }\n          />\n          <label className=\"label-rw\">\n            {this.renderLabel(translatedProps, \"targetCompanySize\", lang)}\n          </label>\n          <Combobox\n            name=\"targetCompanySize\"\n            data={this.props.companySizes}\n            value={targetCompanySize}\n            textField={lang}\n            valueField=\"@type\"\n            placeholder={this.renderLabel(\n              translatedProps,\n              \"targetCompanySize\",\n              lang\n            )}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n            onChange={value =>\n              this.handleSelectChange(\"targetCompanySize\", value)\n            }\n          />\n          <label className=\"label-rw\">\n            {this.renderLabel(translatedProps, \"targetCompanyField\", lang)}\n          </label>\n          <Multiselect\n            name=\"targetCompanyField\"\n            data={this.props.industries}\n            value={targetCompanyField}\n            textField={lang}\n            valueField=\"@type\"\n            placeholder={this.renderLabel(\n              translatedProps,\n              \"targetCompanyField\",\n              lang\n            )}\n            caseSensitive={false}\n            minLength={3}\n            filter=\"contains\"\n            onChange={value =>\n              this.handleMultiSelectChange(\"targetCompanyField\", value)\n            }\n          />\n          <div className=\"mb-3\"></div>\n          <CustomTextarea\n            id=\"targetCompanyDescription\"\n            label={this.renderLabel(\n              translatedProps,\n              \"targetCompanyDescription\",\n              lang\n            )}\n            value={this.findTranslatedValue(targetCompanyDescription, lang)}\n            handleChange={(e) => this.handleInputChangeWithLanguage(e, lang)}\n          />\n        </Col>\n        <Col md={4}> </Col>\n      </Row>\n    );\n  }\n}\n\nconst mapstateToProps = state => {\n  return {\n    countries: retrieveCountryValues(state.utility.countryValues),\n    jobModes: retrieveBaseProperties(state.utility.jobModeValues),\n    careerLevels: retrieveBaseProperties(state.utility.careerLevelValues),\n    companySizes: retrieveBaseProperties(state.utility.companySizeValues),\n    regions: retrieveBaseProperties(state.utility.regions),\n    industries: retrieveBaseProperties(state.utility.industries),\n    target: state.cv[\"my0:hasTarget\"],\n    language: state.utility.language,\n    translatedProps: retrieveMainProperties(state.utility[\"my0:Target\"])\n  };\n};\n\nexport default connect(\n  mapstateToProps,\n  {\n    fetchCVJobModes,\n    fetchCVCareerLevels,\n    fetchCountries,\n    fetchCompanySizes,\n    fetchMainPropertiess,\n    fetchAllRegionss,\n    fetchAllIndustryTypess,\n    updateTarget,\n    updateCVLastUpdate\n  }\n)(FormTarget);\n"]},"metadata":{},"sourceType":"module"}