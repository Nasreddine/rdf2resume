{"ast":null,"code":"var _jsxFileName = \"/home/eelezi/thesis/rdf2resume/UI/src/components/Upload/UploadForm.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { updateCV } from \"../../actions\";\nimport Swal from \"sweetalert2\";\nimport { uploadTitle, uploadDescription, uploadButtonLabel, errorTitle, successTitle } from // uploadSelectLabel\n\"../../translations/translations\"; // import { parseJSONLDTOJSON } from '../../utilities/utilityFunctions';\n\nclass UploadForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rdfValues: [\"rdfa\", \"microdata\", \"xml\", \"n3\", \"nt\", \"json-ld\"],\n      rdfValueSelected: \"\"\n    };\n\n    this.handleSelectChange = value => {\n      this.setState({\n        rdfValueSelected: value\n      });\n    };\n\n    this.onChange = e => {\n      let file = e.target.files[0];\n      var formData = new FormData();\n      formData.append(\"file\", file);\n      axios.post(\"/upload?standard=\" + this.state.rdfValueSelected, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(resp => {\n        this.props.updateCV(resp.data); //this.props.updateCV(parseJSONLDTOJSON(resp.data));\n\n        Swal.fire({\n          title: successTitle[this.props.language],\n          // text: \"Do you want to continue to forms?\",\n          type: \"success\",\n          confirmButtonColor: \"#4bb3cc\",\n          heightAuto: false,\n          confirmButtonText: \"Okay\"\n        }).then(result => {\n          if (result.value) {\n            this.props.history.push(\"/d/about\");\n          }\n        });\n      }).catch(error => {\n        console.log(error);\n        Swal.fire({\n          title: errorTitle[this.props.language],\n          text: error,\n          type: \"error\",\n          heightAuto: false,\n          confirmButtonText: \"Okay\"\n        });\n      });\n    };\n  }\n\n  render() {\n    let lang = this.props.language;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, uploadTitle[lang]), React.createElement(\"p\", {\n      style: {\n        width: '700px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \" \", uploadDescription[lang], \" \"), React.createElement(\"label\", {\n      style: {\n        marginLeft: \"0px\"\n      },\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, uploadButtonLabel[lang], React.createElement(\"input\", {\n      onChange: this.onChange,\n      type: \"file\",\n      hidden: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.utility.language\n  };\n};\n\nexport default connect(mapStateToProps, {\n  updateCV\n})(UploadForm);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/UI/src/components/Upload/UploadForm.jsx"],"names":["React","Component","axios","connect","updateCV","Swal","uploadTitle","uploadDescription","uploadButtonLabel","errorTitle","successTitle","UploadForm","state","rdfValues","rdfValueSelected","handleSelectChange","value","setState","onChange","e","file","target","files","formData","FormData","append","post","headers","then","resp","props","data","fire","title","language","type","confirmButtonColor","heightAuto","confirmButtonText","result","history","push","catch","error","console","log","text","render","lang","width","marginLeft","mapStateToProps","utility"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { updateCV } from \"../../actions\";\nimport Swal from \"sweetalert2\";\nimport {\n  uploadTitle,\n  uploadDescription,\n  uploadButtonLabel,\n  errorTitle,\n  successTitle,\n  // uploadSelectLabel\n} from \"../../translations/translations\";\n// import { parseJSONLDTOJSON } from '../../utilities/utilityFunctions';\n\nclass UploadForm extends Component {\n  state = {\n    rdfValues: [\"rdfa\", \"microdata\", \"xml\", \"n3\", \"nt\", \"json-ld\"],\n    rdfValueSelected: \"\"\n  };\n\n  handleSelectChange = value => {\n    this.setState({\n      rdfValueSelected: value\n    });\n  };\n\n  onChange = e => {\n    let file = e.target.files[0];\n    var formData = new FormData();\n    formData.append(\"file\", file);\n    axios\n      .post(\"/upload?standard=\" + this.state.rdfValueSelected, formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      })\n      .then(resp => {\n        this.props.updateCV(resp.data);\n        //this.props.updateCV(parseJSONLDTOJSON(resp.data));\n        Swal.fire({\n          title: successTitle[this.props.language],\n          // text: \"Do you want to continue to forms?\",\n          type: \"success\",\n          confirmButtonColor: \"#4bb3cc\",\n          heightAuto: false,\n          confirmButtonText: \"Okay\"\n        }).then(result => {\n          if (result.value) {\n            this.props.history.push(\"/d/about\");\n          }\n        });\n      })\n      .catch(error => {\n        console.log(error);\n        Swal.fire({\n          title: errorTitle[this.props.language],\n          text: error,\n          type: \"error\",\n          heightAuto: false,\n          confirmButtonText: \"Okay\"\n        });\n      });\n  };\n\n  render() {\n    let lang = this.props.language;\n\n    return (\n      <React.Fragment>\n        <div className=\"form-group\">\n          <h4>{uploadTitle[lang]}</h4>\n          <p style={{ width: '700px' }}> {uploadDescription[lang]} </p>\n          <label style={{ marginLeft: \"0px\" }} className=\"btn btn-primary\">\n            {uploadButtonLabel[lang]}\n            <input onChange={this.onChange} type=\"file\" hidden />\n          </label>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.utility.language\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    updateCV\n  }\n)(UploadForm);\n"]},"metadata":{},"sourceType":"module"}