{"ast":null,"code":"var _jsxFileName = \"/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormReference/ReferenceCard.jsx\";\nimport React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserCircle, faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { removeReference } from \"../../../../../actions\";\nimport ReferenceModal from \"./ReferenceModal\";\nimport { fetchCountries, fetchTitleProperties } from \"../../../../../actions/utilityActions\";\nimport { retrieveCountryValues, retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\n\nclass ReferenceCard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editMode: false,\n      key: 0\n    };\n\n    this.handleCloseEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: false,\n        key: ++key\n      });\n    };\n\n    this.handleShowEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: true,\n        key: ++key\n      });\n    };\n\n    this.handleUpdateClick = () => {\n      this.setState({\n        editMode: true\n      });\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchCountries();\n    this.props.fetchTitleProperties();\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  render() {\n    let _this$props$reference = this.props.referenceObj[\"my0:referenceBy\"],\n        title = _this$props$reference[\"my0:title\"],\n        firstName = _this$props$reference[\"my0:firstName\"],\n        lastName = _this$props$reference[\"my0:lastName\"],\n        address = _this$props$reference[\"my0:address\"],\n        currentJob = _this$props$reference[\"my0:currentJob\"],\n        email = _this$props$reference[\"my0:email\"],\n        hasTelephoneNumber = _this$props$reference[\"my0:hasTelephoneNumber\"];\n    let city = address[\"my0:city\"],\n        country = address[\"my0:country\"],\n        street = address[\"my0:street\"],\n        postalCode = address[\"my0:postalCode\"];\n    let lang = this.props.language;\n    let jobTitle = currentJob[\"my0:jobTitle\"];\n    return React.createElement(Card, {\n      style: {\n        width: \"18rem\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faEdit,\n      onClick: () => this.handleUpdateClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(FontAwesomeIcon, {\n      icon: faTrash,\n      onClick: () => this.props.removeReference(this.props.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"card-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faUserCircle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })), React.createElement(Card.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Card.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.renderLabel(this.props.titles, title, lang), \" \", firstName, \" \", lastName), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, jobTitle, \" | \", currentJob[\"my0:employedIn\"][\"my0:organizationName\"]), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, street), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \" \", postalCode, \" \", \" \", \" \", city, \" \"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.renderLabel(this.props.countries, country, lang))), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, hasTelephoneNumber), React.createElement(Card.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Card.Link, {\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, email))), React.createElement(ReferenceModal, {\n      show: this.state.editMode,\n      isUpdate: true,\n      id: this.props.id,\n      onHide: this.handleCloseEdit,\n      key: this.state.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapstateToProps = state => {\n  return {\n    language: state.utility.language,\n    countries: retrieveCountryValues(state.utility.countryValues),\n    titles: retrieveBaseProperties(state.utility.titleValues)\n  };\n};\n\nexport default connect(mapstateToProps, {\n  removeReference,\n  fetchCountries,\n  fetchTitleProperties\n})(ReferenceCard);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormReference/ReferenceCard.jsx"],"names":["React","Component","Card","connect","FontAwesomeIcon","faUserCircle","faEdit","faTrash","removeReference","ReferenceModal","fetchCountries","fetchTitleProperties","retrieveCountryValues","retrieveBaseProperties","ReferenceCard","state","editMode","key","handleCloseEdit","setState","handleShowEdit","handleUpdateClick","componentWillMount","props","findInArray","data","name","length","i","index","indexOf","newlength","renderLabel","translated","lang","undefined","render","referenceObj","title","firstName","lastName","address","currentJob","email","hasTelephoneNumber","city","country","street","postalCode","language","jobTitle","width","id","titles","countries","mapstateToProps","utility","countryValues","titleValues"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUserCircle,\n  faEdit,\n  faTrash\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { removeReference } from \"../../../../../actions\";\nimport ReferenceModal from \"./ReferenceModal\";\nimport {\n  fetchCountries,\n  fetchTitleProperties\n} from \"../../../../../actions/utilityActions\";\nimport {\n  retrieveCountryValues,\n  retrieveBaseProperties\n} from \"../../../../../utilities/utilityQueries\";\n\nclass ReferenceCard extends Component {\n  state = {\n    editMode: false,\n    key: 0\n  };\n\n  componentWillMount() {\n    this.props.fetchCountries();\n    this.props.fetchTitleProperties();\n  }\n\n  handleCloseEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: false, key: ++key });\n  };\n\n  handleShowEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: true, key: ++key });\n  };\n\n  handleUpdateClick = () => {\n    this.setState({\n      editMode: true\n    });\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  render() {\n    let {\n      \"my0:title\": title,\n      \"my0:firstName\": firstName,\n      \"my0:lastName\": lastName,\n      \"my0:address\": address,\n      \"my0:currentJob\": currentJob,\n      \"my0:email\": email,\n      \"my0:hasTelephoneNumber\": hasTelephoneNumber\n    } = this.props.referenceObj[\"my0:referenceBy\"];\n\n    let {\n      \"my0:city\": city,\n      \"my0:country\": country,\n      \"my0:street\": street,\n      \"my0:postalCode\": postalCode\n    } = address;\n\n    let lang = this.props.language;\n\n    let { \"my0:jobTitle\": jobTitle } = currentJob;\n    return (\n      <Card style={{ width: \"18rem\" }}>\n        <Card.Header>\n          <FontAwesomeIcon\n            icon={faEdit}\n            onClick={() => this.handleUpdateClick()}\n          />\n          <FontAwesomeIcon\n            icon={faTrash}\n            onClick={() => this.props.removeReference(this.props.id)}\n          />\n        </Card.Header>\n        <div className=\"card-icon\">\n          <FontAwesomeIcon icon={faUserCircle} />\n        </div>\n        <Card.Body>\n          <Card.Title>\n            {this.renderLabel(this.props.titles, title, lang)} {firstName}{\" \"}\n            {lastName}\n          </Card.Title>\n          <Card.Text>\n            {jobTitle} | {currentJob[\"my0:employedIn\"][\"my0:organizationName\"]}\n          </Card.Text>\n          <Card.Text>\n            <p>{street}</p>\n            <p>\n              {\" \"}\n              {postalCode} {\" \"} {city}{\" \"}\n            </p>\n            <p>{this.renderLabel(this.props.countries, country, lang)}</p>\n          </Card.Text>\n          <Card.Text>{hasTelephoneNumber}</Card.Text>\n          <Card.Text>\n            <Card.Link href=\"#\">{email}</Card.Link>\n          </Card.Text>\n        </Card.Body>\n        <ReferenceModal\n          show={this.state.editMode}\n          isUpdate={true}\n          id={this.props.id}\n          onHide={this.handleCloseEdit}\n          key={this.state.key}\n        />\n      </Card>\n    );\n  }\n}\n\nconst mapstateToProps = state => {\n  return {\n    language: state.utility.language,\n    countries: retrieveCountryValues(state.utility.countryValues),\n    titles: retrieveBaseProperties(state.utility.titleValues)\n  };\n};\n\nexport default connect(\n  mapstateToProps,\n  { removeReference, fetchCountries, fetchTitleProperties }\n)(ReferenceCard);\n"]},"metadata":{},"sourceType":"module"}