{"ast":null,"code":"var _jsxFileName = \"/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormLanguage/LanguageView.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { removeOtherSkill } from \"../../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport LanguageModal from \"./LanguageModal\";\nimport { fetchLanguageSkillSelfAssessmentProperties } from \"../../../../../actions/utilityActions\";\nimport { retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\n\nclass LanguageView extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      editMode: false,\n      key: 0\n    };\n\n    this.handleCloseEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: false,\n        key: ++key\n      });\n    };\n\n    this.handleShowEdit = () => {\n      let key = this.state.key;\n      this.setState({\n        editMode: true,\n        key: ++key\n      });\n    };\n\n    this.handleUpdateClick = () => {\n      this.setState({\n        editMode: true\n      });\n    };\n  }\n\n  componentWillMount() {\n    this.props.fetchLanguageSkillSelfAssessmentProperties();\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let _this$props$languageS = this.props.languageSkillObj,\n        skillName = _this$props$languageS[\"my0:skillName\"],\n        languageSkillProficiency = _this$props$languageS[\"my0:languageSkillProficiency\"];\n    let lang = this.props.language;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-start\",\n        marginLeft: \"0px\",\n        marginBottom: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      style: {\n        paddingLeft: \"0\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.findTranslatedValue(skillName, lang)), \" -\", \" \", this.renderLabel(this.props.types, languageSkillProficiency, this.props.language)), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faEdit,\n      onClick: () => this.handleUpdateClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(FontAwesomeIcon, {\n      icon: faTrash,\n      onClick: () => this.props.removeOtherSkill(this.props.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(LanguageModal, {\n      show: this.state.editMode,\n      id: this.props.id,\n      isUpdate: true,\n      onHide: this.handleCloseEdit,\n      skillObj: this.props.skillObj,\n      key: this.state.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.utility.language,\n    types: retrieveBaseProperties(state.utility.languageSelfAssessmentValues)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  removeOtherSkill,\n  fetchLanguageSkillSelfAssessmentProperties\n})(LanguageView);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/src/components/Dashboard/Forms/Modals/FormLanguage/LanguageView.jsx"],"names":["React","Component","Row","Col","FontAwesomeIcon","removeOtherSkill","connect","faEdit","faTrash","LanguageModal","fetchLanguageSkillSelfAssessmentProperties","retrieveBaseProperties","LanguageView","state","editMode","key","handleCloseEdit","setState","handleShowEdit","handleUpdateClick","componentWillMount","props","findInArray","data","name","length","i","index","indexOf","newlength","renderLabel","translated","lang","undefined","findTranslatedValue","render","languageSkillObj","skillName","languageSkillProficiency","language","justifyContent","alignItems","marginLeft","marginBottom","paddingLeft","types","id","skillObj","mapStateToProps","utility","languageSelfAssessmentValues"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { removeOtherSkill } from \"../../../../../actions\";\nimport { connect } from \"react-redux\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport LanguageModal from \"./LanguageModal\";\nimport { fetchLanguageSkillSelfAssessmentProperties } from \"../../../../../actions/utilityActions\";\nimport { retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\n\nclass LanguageView extends Component {\n  state = {\n    editMode: false,\n    key: 0\n  };\n\n  componentWillMount() {\n    this.props.fetchLanguageSkillSelfAssessmentProperties();\n  }\n\n  handleCloseEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: false, key: ++key });\n  };\n\n  handleShowEdit = () => {\n    let key = this.state.key;\n    this.setState({ editMode: true, key: ++key });\n  };\n\n  handleUpdateClick = () => {\n    this.setState({\n      editMode: true\n    });\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  render() {\n    let {\n      \"my0:skillName\": skillName,\n      \"my0:languageSkillProficiency\": languageSkillProficiency\n    } = this.props.languageSkillObj;\n\n    let lang = this.props.language;\n\n    return (\n      <React.Fragment>\n        <Row\n          style={{\n            justifyContent: \"flex-start\",\n            alignItems: \"flex-start\",\n            marginLeft: \"0px\",\n            marginBottom: '5px'\n          }}\n        >\n          <Col md={8} style={{ paddingLeft: \"0\" }}>\n            <b>{this.findTranslatedValue(skillName, lang)}</b> -{\" \"}\n            {this.renderLabel(\n              this.props.types,\n              languageSkillProficiency,\n              this.props.language\n            )}\n          </Col>\n          <Col md={4}>\n            <FontAwesomeIcon\n              icon={faEdit}\n              onClick={() => this.handleUpdateClick()}\n            />\n            <FontAwesomeIcon\n              icon={faTrash}\n              onClick={() => this.props.removeOtherSkill(this.props.id)}\n            />\n          </Col>\n        </Row>\n        <LanguageModal\n          show={this.state.editMode}\n          id={this.props.id}\n          isUpdate={true}\n          onHide={this.handleCloseEdit}\n          skillObj={this.props.skillObj}\n          key={this.state.key}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    language: state.utility.language,\n    types: retrieveBaseProperties(state.utility.languageSelfAssessmentValues)\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { removeOtherSkill, fetchLanguageSkillSelfAssessmentProperties }\n)(LanguageView);\n"]},"metadata":{},"sourceType":"module"}