{"ast":null,"code":"import _objectSpread from \"/home/eelezi/thesis/rdf2resume/UI/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/home/eelezi/thesis/rdf2resume/UI/src/components/Dashboard/Forms/Modals/FormSkill/SkillModal.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { Combobox } from \"react-widgets\";\nimport { Modal, Row, Col, Button } from \"react-bootstrap\";\nimport CustomTextarea from \"../../../../core/CustomTextarea\";\nimport { createOtherSkill, updateOtherSkill, updateCVLastUpdate } from \"../../../../../actions\";\nimport CustomInput from \"../../../../core/CustomInput\";\nimport CustomCheckbox from \"../../../../core/CustomCheckbox\";\nimport { fetchMainPropertiess, fetchSkillCategories, fetchSkillSuggestion, updateLanguage } from \"../../../../../actions/utilityActions\";\nimport { retrieveMainProperties, retrieveBaseProperties } from \"../../../../../utilities/utilityQueries\";\nimport { cancelLabel, resetLabel, saveLabel, updateLabel, successTitle } from \"../../../../../translations/translations\";\nimport CustomLevelButton from \"../../../../core/CustomLevelButton\";\nimport { skillAddTitle, skillUpdateTitle } from \"../../../../../translations/translations\";\nimport { ListItem, languages } from \"../../../../core/LanguageToggle\";\n\nclass SkillModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      language: '',\n      otherSkill: {\n        \"@type\": \"my0:Skill\",\n        \"my0:skillName\": [{\n          \"@value\": \"\",\n          \"@language\": \"en\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"it\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"fr\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"de\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"sq\"\n        }],\n        \"my0:skillDescription\": [{\n          \"@value\": \"\",\n          \"@language\": \"en\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"it\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"fr\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"de\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"sq\"\n        }],\n        \"my0:skillCategory\": \"\",\n        \"my0:skillLevel\": \"\",\n        \"my0:skillHasCertificate\": true,\n        \"my0:skillCertificateName\": [{\n          \"@value\": \"\",\n          \"@language\": \"en\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"it\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"fr\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"de\"\n        }, {\n          \"@value\": \"\",\n          \"@language\": \"sq\"\n        }]\n      }\n    };\n\n    this.setInitialValues = () => {\n      if (this.props.id !== null && this.props.isUpdate === true) {\n        let inputRef = this.props.initialValues;\n\n        let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n        otherSkill[\"my0:skillName\"] = inputRef[\"my0:skillName\"];\n        otherSkill[\"my0:skillCategory\"] = inputRef[\"my0:skillCategory\"];\n        otherSkill[\"my0:skillDescription\"] = inputRef[\"my0:skillDescription\"];\n        otherSkill[\"my0:skillLevel\"] = inputRef[\"my0:skillLevel\"];\n        otherSkill[\"my0:skillHasCertificate\"] = inputRef[\"my0:skillHasCertificate\"];\n        otherSkill[\"my0:skillCertificateName\"] = inputRef[\"my0:skillCertificateName\"];\n        this.setState({\n          otherSkill\n        });\n      }\n    };\n\n    this.clearForm = () => {\n      if (!this.props.isUpdate) {\n        this.setState({\n          otherSkill: {\n            \"@type\": \"my0:Skill\",\n            \"my0:skillName\": [{\n              \"@value\": \"\",\n              \"@language\": \"en\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"it\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"fr\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"de\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"sq\"\n            }],\n            \"my0:skillDescription\": [{\n              \"@value\": \"\",\n              \"@language\": \"en\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"it\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"fr\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"de\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"sq\"\n            }],\n            \"my0:skillCategory\": \"\",\n            \"my0:skillLevel\": \"\",\n            \"my0:skillHasCertificate\": true,\n            \"my0:skillCertificateName\": [{\n              \"@value\": \"\",\n              \"@language\": \"en\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"it\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"fr\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"de\"\n            }, {\n              \"@value\": \"\",\n              \"@language\": \"sq\"\n            }]\n          }\n        });\n      } else {\n        this.setInitialValues();\n      }\n    };\n\n    this.handleCheckboxChange = e => {\n      let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n      otherSkill[e.target.id] = e.target.checked;\n      this.setState({\n        otherSkill\n      });\n    };\n\n    this.handleInputChange = (e, lang) => {\n      let label = e.target.id;\n\n      let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n      if (lang) {\n        otherSkill[label] = this.replaceLanguageValue(otherSkill[label], lang, e.target.value);\n      } else {\n        otherSkill[label] = e.target.value;\n      }\n\n      this.setState({\n        otherSkill\n      });\n    };\n\n    this.handleSelectChange = (value, id) => {\n      let obj = _objectSpread({}, this.state.otherSkill);\n\n      let label = id;\n      obj[label] = value[\"@type\"];\n      this.setState({\n        otherSkill: obj\n      });\n    };\n\n    this.handleSave = e => {\n      e.preventDefault();\n      this.props.createOtherSkill(this.state.otherSkill);\n      this.props.updateCVLastUpdate();\n      this.props.onHide();\n      Swal.fire({\n        title: successTitle[this.props.language],\n        type: \"success\",\n        confirmButtonColor: \"#4bb3cc\",\n        heightAuto: false,\n        confirmButtonText: \"Okay\"\n      });\n    };\n\n    this.handleUpdate = e => {\n      this.props.updateOtherSkill({\n        object: this.state.otherSkill,\n        index: this.props.id\n      });\n      this.props.updateCVLastUpdate();\n      this.props.onHide();\n      Swal.fire({\n        title: successTitle[this.props.language],\n        type: \"success\",\n        confirmButtonColor: \"#4bb3cc\",\n        heightAuto: false,\n        confirmButtonText: \"Okay\"\n      });\n    };\n\n    this.handleRenderingSubmitButton = lang => {\n      let isDisabled = this.state.otherSkill[\"my0:skillName\"] === \"\" || this.state.otherSkill[\"my0:skillCategory\"] === \"\" || this.state.otherSkill[\"my0:skillLevel\"] === \"\";\n\n      if (!this.props.isUpdate) {\n        return React.createElement(Button, {\n          disabled: isDisabled,\n          type: \"submit\",\n          variant: \"primary\",\n          onClick: this.handleSave,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301\n          },\n          __self: this\n        }, saveLabel[lang]);\n      } else {\n        return React.createElement(Button, {\n          disabled: isDisabled,\n          type: \"submit\",\n          variant: \"primary\",\n          onClick: this.handleUpdate,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312\n          },\n          __self: this\n        }, updateLabel[lang]);\n      }\n    };\n\n    this.handleLevelClick = e => {\n      let label = \"my0:skillLevel\";\n\n      let otherSkill = _objectSpread({}, this.state.otherSkill);\n\n      otherSkill[label] = e.target.id;\n      this.setState({\n        otherSkill\n      });\n    };\n\n    this.handleSkillSuggestion = (value, id, language) => {\n      this.props.fetchSkillSuggestion(value, language);\n\n      let obj = _objectSpread({}, this.state.otherSkill);\n\n      let label = id;\n      obj[label] = this.replaceLanguageValue(obj[label], language, value[\"title\"]); // obj[label] = value[\"title\"];\n\n      this.setState({\n        otherSkill: obj\n      });\n    };\n  }\n\n  componentWillMount() {\n    this.setInitialValues();\n    this.props.fetchSkillCategories();\n    this.props.fetchMainPropertiess(\"my0:Skill\");\n    this.props.fetchSkillSuggestion();\n    this.setState({\n      language: this.props.language\n    });\n  }\n\n  replaceLanguageValue(data, language, value) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === language) {\n        data[i][\"@value\"] = value;\n        break;\n      }\n    }\n\n    return data;\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  findInArray(data, name) {\n    let length = data.length;\n\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n\n    if (translated[index] === undefined || translated[index][lang] === undefined) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  render() {\n    let _this$state$otherSkil = this.state.otherSkill,\n        skillName = _this$state$otherSkil[\"my0:skillName\"],\n        skillCategory = _this$state$otherSkil[\"my0:skillCategory\"],\n        skillDescription = _this$state$otherSkil[\"my0:skillDescription\"],\n        skillHasCertificate = _this$state$otherSkil[\"my0:skillHasCertificate\"],\n        skillLevel = _this$state$otherSkil[\"my0:skillLevel\"],\n        skillCertificateName = _this$state$otherSkil[\"my0:skillCertificateName\"];\n    let onHide = this.props.onHide;\n    let lang = this.state.language;\n    let translatedProps = this.props.translatedProps;\n\n    let changeLanguage = value => this.setState({\n      language: value\n    });\n\n    return React.createElement(Modal, {\n      show: this.props.show,\n      onHide: this.props.onHide,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      className: \"reference-modal\",\n      centered: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, this.props.isUpdate ? skillUpdateTitle[lang] : skillAddTitle[lang]), React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    })))), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(Combobox, {\n      name: \"my0:skillName\",\n      placeholder: this.renderLabel(translatedProps, \"skillName\", lang) + \" *\",\n      data: this.props.skillSuggestions,\n      textField: \"title\",\n      valueField: \"title\",\n      value: this.findTranslatedValue(skillName, lang),\n      caseSensitive: false,\n      onChange: value => this.handleSkillSuggestion(value, \"my0:skillName\", lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"skillLevel\", lang) + \" *\"), React.createElement(CustomLevelButton, {\n      id: \"my0:skillLevel\",\n      label: \"Skill Level\",\n      filledNumber: skillLevel,\n      handleClick: this.handleLevelClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }))), React.createElement(Row, {\n      style: {\n        width: \"100%\",\n        justifyContent: \"left\",\n        marginLeft: \"0px\",\n        marginBottom: \"8px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"label-rw\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, this.renderLabel(translatedProps, \"skillCategory\", lang)), React.createElement(Combobox, {\n      name: \"my0:skillCategory\",\n      placeholder: this.renderLabel(translatedProps, \"skillCategory\", lang) + \" *\",\n      data: this.props.categories,\n      textField: lang,\n      valueField: \"@type\",\n      value: skillCategory,\n      caseSensitive: false,\n      minLength: 3,\n      filter: \"contains\",\n      onChange: value => this.handleSelectChange(value, \"my0:skillCategory\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447\n      },\n      __self: this\n    })), React.createElement(CustomTextarea, {\n      id: \"my0:skillDescription\",\n      label: this.renderLabel(translatedProps, \"skillDescription\", lang),\n      value: this.findTranslatedValue(skillDescription, lang),\n      handleChange: e => this.handleInputChange(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }), React.createElement(CustomCheckbox, {\n      id: \"my0:skillHasCertificate\",\n      type: \"checkbox\",\n      label: this.renderLabel(translatedProps, \"skillHasCertificate\", lang),\n      checked: skillHasCertificate,\n      handleChange: this.handleCheckboxChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      id: \"my0:skillCertificateName\",\n      label: this.renderLabel(translatedProps, \"skillCertificateName\", lang),\n      type: \"text\",\n      value: this.findTranslatedValue(skillCertificateName, lang),\n      handleChange: e => this.handleInputChange(e, lang),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481\n      },\n      __self: this\n    })), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }, React.createElement(Combobox, {\n      onChange: changeLanguage,\n      value: lang,\n      defaultValue: \"en\",\n      containerClassName: \"languagebox\",\n      data: languages,\n      itemComponent: ListItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492\n      },\n      __self: this\n    }), this.handleRenderingSubmitButton(lang), React.createElement(Button, {\n      className: \"btn-reset\",\n      onClick: this.clearForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, resetLabel[lang]), React.createElement(Button, {\n      variant: \"danger\",\n      onClick: onHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, cancelLabel[lang])));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    initialValues: state.cv[\"my0:hasSkill\"][ownProps.id],\n    language: state.utility.language,\n    categories: retrieveBaseProperties(state.utility.skillCategories),\n    translatedProps: retrieveMainProperties(state.utility[\"my0:Skill\"]),\n    skillSuggestions: state.utility.skillSuggestion\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchSkillCategories,\n  fetchSkillSuggestion,\n  createOtherSkill,\n  updateOtherSkill,\n  fetchMainPropertiess,\n  updateCVLastUpdate,\n  updateLanguage\n})(SkillModal);","map":{"version":3,"sources":["/home/eelezi/thesis/rdf2resume/UI/src/components/Dashboard/Forms/Modals/FormSkill/SkillModal.jsx"],"names":["React","Component","connect","Swal","Combobox","Modal","Row","Col","Button","CustomTextarea","createOtherSkill","updateOtherSkill","updateCVLastUpdate","CustomInput","CustomCheckbox","fetchMainPropertiess","fetchSkillCategories","fetchSkillSuggestion","updateLanguage","retrieveMainProperties","retrieveBaseProperties","cancelLabel","resetLabel","saveLabel","updateLabel","successTitle","CustomLevelButton","skillAddTitle","skillUpdateTitle","ListItem","languages","SkillModal","state","language","otherSkill","setInitialValues","props","id","isUpdate","inputRef","initialValues","setState","clearForm","handleCheckboxChange","e","target","checked","handleInputChange","lang","label","replaceLanguageValue","value","handleSelectChange","obj","handleSave","preventDefault","onHide","fire","title","type","confirmButtonColor","heightAuto","confirmButtonText","handleUpdate","object","index","handleRenderingSubmitButton","isDisabled","handleLevelClick","handleSkillSuggestion","componentWillMount","data","length","i","findTranslatedValue","findInArray","name","indexOf","newlength","renderLabel","translated","undefined","render","skillName","skillCategory","skillDescription","skillHasCertificate","skillLevel","skillCertificateName","translatedProps","changeLanguage","show","skillSuggestions","width","justifyContent","marginLeft","marginBottom","categories","mapStateToProps","ownProps","cv","utility","skillCategories","skillSuggestion"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Swal from \"sweetalert2\";\nimport { Combobox } from \"react-widgets\";\nimport { Modal, Row, Col, Button } from \"react-bootstrap\";\nimport CustomTextarea from \"../../../../core/CustomTextarea\";\nimport { createOtherSkill, updateOtherSkill, updateCVLastUpdate } from \"../../../../../actions\";\nimport CustomInput from \"../../../../core/CustomInput\";\nimport CustomCheckbox from \"../../../../core/CustomCheckbox\";\nimport {\n  fetchMainPropertiess,\n  fetchSkillCategories,\n  fetchSkillSuggestion,\n  updateLanguage\n} from \"../../../../../actions/utilityActions\";\nimport {\n  retrieveMainProperties,\n  retrieveBaseProperties\n} from \"../../../../../utilities/utilityQueries\";\nimport {\n  cancelLabel,\n  resetLabel,\n  saveLabel,\n  updateLabel,\n  successTitle\n} from \"../../../../../translations/translations\";\nimport CustomLevelButton from \"../../../../core/CustomLevelButton\";\nimport {\n  skillAddTitle,\n  skillUpdateTitle\n} from \"../../../../../translations/translations\";\nimport { ListItem, languages } from \"../../../../core/LanguageToggle\";\n\nclass SkillModal extends Component {\n  state = {\n    language: '',\n    otherSkill: {\n      \"@type\": \"my0:Skill\",\n      \"my0:skillName\": [{\n        \"@value\": \"\",\n        \"@language\": \"en\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"it\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"fr\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"de\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"sq\"\n      },\n      ],\n      \"my0:skillDescription\": [{\n        \"@value\": \"\",\n        \"@language\": \"en\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"it\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"fr\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"de\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"sq\"\n      },\n      ],\n      \"my0:skillCategory\": \"\",\n      \"my0:skillLevel\": \"\",\n      \"my0:skillHasCertificate\": true,\n      \"my0:skillCertificateName\": [{\n        \"@value\": \"\",\n        \"@language\": \"en\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"it\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"fr\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"de\"\n      },\n      {\n        \"@value\": \"\",\n        \"@language\": \"sq\"\n      },\n      ]\n    }\n  };\n\n  componentWillMount() {\n    this.setInitialValues();\n    this.props.fetchSkillCategories();\n    this.props.fetchMainPropertiess(\"my0:Skill\");\n    this.props.fetchSkillSuggestion();\n    this.setState({\n      language: this.props.language\n    })\n  }\n\n  setInitialValues = () => {\n    if (this.props.id !== null && this.props.isUpdate === true) {\n      let inputRef = this.props.initialValues;\n      let otherSkill = { ...this.state.otherSkill };\n      otherSkill[\"my0:skillName\"] = inputRef[\"my0:skillName\"];\n      otherSkill[\"my0:skillCategory\"] = inputRef[\"my0:skillCategory\"];\n      otherSkill[\"my0:skillDescription\"] = inputRef[\"my0:skillDescription\"];\n      otherSkill[\"my0:skillLevel\"] = inputRef[\"my0:skillLevel\"];\n      otherSkill[\"my0:skillHasCertificate\"] =\n        inputRef[\"my0:skillHasCertificate\"];\n      otherSkill[\"my0:skillCertificateName\"] =\n        inputRef[\"my0:skillCertificateName\"];\n      this.setState({\n        otherSkill\n      });\n    }\n  };\n\n  clearForm = () => {\n    if (!this.props.isUpdate) {\n      this.setState({\n        otherSkill: {\n          \"@type\": \"my0:Skill\",\n          \"my0:skillName\": [{\n            \"@value\": \"\",\n            \"@language\": \"en\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"it\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"fr\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"de\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"sq\"\n          },\n          ],\n          \"my0:skillDescription\": [{\n            \"@value\": \"\",\n            \"@language\": \"en\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"it\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"fr\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"de\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"sq\"\n          },\n          ],\n          \"my0:skillCategory\": \"\",\n          \"my0:skillLevel\": \"\",\n          \"my0:skillHasCertificate\": true,\n          \"my0:skillCertificateName\": [{\n            \"@value\": \"\",\n            \"@language\": \"en\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"it\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"fr\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"de\"\n          },\n          {\n            \"@value\": \"\",\n            \"@language\": \"sq\"\n          },\n          ]\n        }\n      });\n    } else {\n      this.setInitialValues();\n    }\n  };\n\n  handleCheckboxChange = e => {\n    let otherSkill = { ...this.state.otherSkill };\n    otherSkill[e.target.id] = e.target.checked;\n    this.setState({\n      otherSkill\n    });\n  };\n\n  replaceLanguageValue(data, language, value) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === language) {\n        data[i][\"@value\"] = value;\n        break;\n      }\n    }\n    return data;\n  }\n\n  findTranslatedValue(data, lang) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      if (data[i][\"@language\"] === lang) {\n        return data[i][\"@value\"];\n      }\n    }\n  }\n\n  handleInputChange = (e, lang) => {\n    let label = e.target.id;\n    let otherSkill = { ...this.state.otherSkill };\n    if (lang) {\n      otherSkill[label] = this.replaceLanguageValue(otherSkill[label], lang, e.target.value);\n    } else {\n      otherSkill[label] = e.target.value;\n    }\n    this.setState({\n      otherSkill\n    });\n  };\n\n  handleSelectChange = (value, id) => {\n    let obj = { ...this.state.otherSkill };\n    let label = id;\n    obj[label] = value[\"@type\"];\n    this.setState({\n      otherSkill: obj\n    });\n  };\n\n  handleSave = e => {\n    e.preventDefault();\n    this.props.createOtherSkill(this.state.otherSkill);\n    this.props.updateCVLastUpdate();\n    this.props.onHide();\n    Swal.fire({\n      title: successTitle[this.props.language],\n      type: \"success\",\n      confirmButtonColor: \"#4bb3cc\",\n      heightAuto: false,\n      confirmButtonText: \"Okay\"\n    });\n  };\n\n  handleUpdate = e => {\n    this.props.updateOtherSkill({\n      object: this.state.otherSkill,\n      index: this.props.id\n    });\n    this.props.updateCVLastUpdate();\n    this.props.onHide();\n    Swal.fire({\n      title: successTitle[this.props.language],\n      type: \"success\",\n      confirmButtonColor: \"#4bb3cc\",\n      heightAuto: false,\n      confirmButtonText: \"Okay\"\n    });\n  };\n\n  handleRenderingSubmitButton = lang => {\n    let isDisabled =\n      this.state.otherSkill[\"my0:skillName\"] === \"\" ||\n      this.state.otherSkill[\"my0:skillCategory\"] === \"\" ||\n      this.state.otherSkill[\"my0:skillLevel\"] === \"\";\n    if (!this.props.isUpdate) {\n      return (\n        <Button\n          disabled={isDisabled}\n          type=\"submit\"\n          variant=\"primary\"\n          onClick={this.handleSave}\n        >\n          {saveLabel[lang]}\n        </Button>\n      );\n    } else {\n      return (\n        <Button\n          disabled={isDisabled}\n          type=\"submit\"\n          variant=\"primary\"\n          onClick={this.handleUpdate}\n        >\n          {updateLabel[lang]}\n        </Button>\n      );\n    }\n  };\n\n  findInArray(data, name) {\n    let length = data.length;\n    for (let i = 0; i < length; i++) {\n      let index = data[i][\"@type\"].indexOf(name);\n      let newlength = data[i][\"@type\"].length;\n      if (index >= 0 && index + name.length >= newlength) {\n        return i;\n      }\n    }\n  }\n\n  renderLabel(translated, name, lang) {\n    let index = this.findInArray(translated, name);\n    if (\n      translated[index] === undefined ||\n      translated[index][lang] === undefined\n    ) {\n      return name;\n    } else {\n      return translated[index][lang];\n    }\n  }\n\n  handleLevelClick = e => {\n    let label = \"my0:skillLevel\";\n    let otherSkill = { ...this.state.otherSkill };\n    otherSkill[label] = e.target.id;\n    this.setState({\n      otherSkill\n    });\n  };\n\n  handleSkillSuggestion = (value, id, language) => {\n    this.props.fetchSkillSuggestion(value, language);\n    let obj = { ...this.state.otherSkill };\n    let label = id;\n    obj[label] = this.replaceLanguageValue(obj[label], language, value[\"title\"]);\n    // obj[label] = value[\"title\"];\n    this.setState({\n      otherSkill: obj\n    });\n  };\n\n  render() {\n    let {\n      \"my0:skillName\": skillName,\n      \"my0:skillCategory\": skillCategory,\n      \"my0:skillDescription\": skillDescription,\n      \"my0:skillHasCertificate\": skillHasCertificate,\n      \"my0:skillLevel\": skillLevel,\n      \"my0:skillCertificateName\": skillCertificateName\n    } = this.state.otherSkill;\n\n    let { onHide } = this.props;\n\n    let lang = this.state.language;\n\n    let { translatedProps } = this.props;\n\n    let changeLanguage = (value) => this.setState({ language: value });\n\n    return (\n      <Modal\n        show={this.props.show}\n        onHide={this.props.onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        className=\"reference-modal\"\n        centered\n      >\n        <Modal.Header closeButton>\n          <Modal.Title id=\"contained-modal-title-vcenter\">\n            <Row>\n              <Col md={4}>\n                {this.props.isUpdate\n                  ? skillUpdateTitle[lang]\n                  : skillAddTitle[lang]}\n              </Col>\n              <Col md={8} />\n            </Row>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Row>\n            <Col md={8}>\n              <Combobox\n                name=\"my0:skillName\"\n                placeholder={\n                  this.renderLabel(translatedProps, \"skillName\", lang) + \" *\"\n                }\n                data={this.props.skillSuggestions}\n                textField=\"title\"\n                valueField=\"title\"\n                value={this.findTranslatedValue(skillName, lang)}\n                caseSensitive={false}\n                onChange={value =>\n                  this.handleSkillSuggestion(value, \"my0:skillName\", lang)\n                }\n              />\n            </Col>\n            <Col md={4}>\n              <label className=\"label-rw\">\n                {this.renderLabel(translatedProps, \"skillLevel\", lang) + \" *\"}\n              </label>\n              <CustomLevelButton\n                id=\"my0:skillLevel\"\n                label=\"Skill Level\"\n                filledNumber={skillLevel}\n                handleClick={this.handleLevelClick}\n              />\n            </Col>\n          </Row>\n          <Row\n            style={{\n              width: \"100%\",\n              justifyContent: \"left\",\n              marginLeft: \"0px\",\n              marginBottom: \"8px\"\n            }}\n          >\n            <label className=\"label-rw\">\n              {this.renderLabel(translatedProps, \"skillCategory\", lang)}\n            </label>\n            <Combobox\n              name=\"my0:skillCategory\"\n              placeholder={\n                this.renderLabel(translatedProps, \"skillCategory\", lang) + \" *\"\n              }\n              data={this.props.categories}\n              textField={lang}\n              valueField=\"@type\"\n              value={skillCategory}\n              caseSensitive={false}\n              minLength={3}\n              filter=\"contains\"\n              onChange={value =>\n                this.handleSelectChange(value, \"my0:skillCategory\")\n              }\n            />\n          </Row>\n          <CustomTextarea\n            id=\"my0:skillDescription\"\n            label={this.renderLabel(translatedProps, \"skillDescription\", lang)}\n            value={this.findTranslatedValue(skillDescription, lang)}\n            handleChange={(e) => this.handleInputChange(e, lang)}\n          />\n          <CustomCheckbox\n            id=\"my0:skillHasCertificate\"\n            type=\"checkbox\"\n            label={this.renderLabel(\n              translatedProps,\n              \"skillHasCertificate\",\n              lang\n            )}\n            checked={skillHasCertificate}\n            handleChange={this.handleCheckboxChange}\n          />\n          <CustomInput\n            id=\"my0:skillCertificateName\"\n            label={\n              this.renderLabel(translatedProps, \"skillCertificateName\", lang)\n            }\n            type=\"text\"\n            value={this.findTranslatedValue(skillCertificateName, lang)}\n            handleChange={(e) => this.handleInputChange(e, lang)}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Combobox onChange={changeLanguage} value={lang} defaultValue={\"en\"} containerClassName=\"languagebox\" data={languages} itemComponent={ListItem} />\n          {this.handleRenderingSubmitButton(lang)}\n          <Button className=\"btn-reset\" onClick={this.clearForm}>\n            {resetLabel[lang]}\n          </Button>\n          <Button variant=\"danger\" onClick={onHide}>\n            {cancelLabel[lang]}\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    initialValues: state.cv[\"my0:hasSkill\"][ownProps.id],\n    language: state.utility.language,\n    categories: retrieveBaseProperties(state.utility.skillCategories),\n    translatedProps: retrieveMainProperties(state.utility[\"my0:Skill\"]),\n    skillSuggestions: state.utility.skillSuggestion\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    fetchSkillCategories,\n    fetchSkillSuggestion,\n    createOtherSkill,\n    updateOtherSkill,\n    fetchMainPropertiess,\n    updateCVLastUpdate,\n    updateLanguage\n  }\n)(SkillModal);\n"]},"metadata":{},"sourceType":"module"}